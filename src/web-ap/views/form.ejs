
<!DOCTYPE html>
<html lang="pt">
<head>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Team Plus - Form teams</title>


  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
  
  <link rel="stylesheet" href="https://felipeomc.github.io/te/ekko-lightbox.css">
  
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/Felipeomc/team/all.min.css">
 
  <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
 
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/Felipeomc/team/adminlte.min.css">
 
 <link rel="stylesheet" type="text/css" href="bootstrap-datepicker.css" >
 
 <link rel="stylesheet" href="https://felipeomc.github.io/te/simpleTimeline.css" />




<!--<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/Felipeomc/team/jquery.tagsinput-revisited.css">-->


		
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>


<script src="https://code.jquery.com/jquery-3.1.1.min.js" ></script>

<!-- Carregar jQuery -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<!-- Carregar jQuery UI -->
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>


<!--<script src="http://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>-->

<!--<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-tagsinput/1.3.6/jquery.tagsinput.min.js"></script>-->

<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

<script language="JavaScript" src="projetos.js"></script>
<script language="JavaScript" src="populacao.js"></script>
<script language="JavaScript" src="teste_algo_genetic.js"></script>


<script language="JavaScript" src="/routes/index.js"></script>
<!-- incluir a biblioteca jQuery -->

<script language="JavaScript" src="C:\Users\Felipe\Works\web-ap\mid.js"></script>





<script src="https://felipeomc.github.io/te/simpleTimeline.js"></script>
<script src="https://felipeomc.github.io/te/resize.js"></script>


	
<script type="text/javascript" src="bootstrap-datepicker.js"></script>

<!-- pop up para mostrar projectso similares-->

 <link rel="stylesheet" type="text/css" href="pop.min.css">
<script type="text/javascript" src="pop.min.js"></script>

 


	<script>








		

			$(function() {

			$('.dates #usr1').datepicker({
				'format': 'yyyy',
				'autoclose': true
			});  //fff

//fff
		});
		$(function() {

			$('.dates #usr2').datepicker({
				'format': 'yyyy',
				'autoclose': true
			});


		});
			</script>


			


<style>
.capitalized {
	text-transform: capitalize;
}

.Busca_valor {
    width: 85%;
    
    height: 20px; 
    float: left;
}

.insert_busca_width {
    background-color: #ff3c00;
    height: 17px;
    color: white;
    position: relative;
    top: 50%;
    transform: translateY(-50%);
    font-size: 14px;
}


.btn-rounded {

    border-radius: 0.2em;
	font-size:16px;
}
			#timeline {
				position: relative;
				margin-top: 20px;
				max-width: 100%;
				overflow-x: auto;
				overflow-y: hidden;
				border: 1px solid dimgray;
				box-shadow: 3px 3px 10px 0px rgba(0, 0, 0, 0.75);
			}
			
			#timeline .selected	{
				font-weight: bold;
				box-shadow: 0px 0px 3px 1px gray;
			}
			
			#timeline-collapse {
				top: 355px
			}
			
			.styleA {
				color: darkgreen;
				background-color: lightgreen;
			}
			
			.styleB {
				color: darkred;
				background-color: mistyrose;
			}
			
			.styleC {
				color: darkblue;
				background-color: lightblue;
			}
			
			.timeline-unused-phase {
				background: repeating-linear-gradient(
					-45deg,
					rgba(255,255,255,0.85),
					rgba(255,255,255,0.85) 10px,
					rgba(235,235,235,0.85) 10px,
					rgba(235,235,235,0.85) 20px
				);
			}
			
			/* NOTE: YOU MIGHT ALSO NEED TO ADAPT THE COLLAPSE/EXPAND TOGGLE POSITIONS IN simpleTimeline.css
			






.content-wrapper{
	display:none;
}	
.tooltipe {
    width:350px;
    height:60px;
    padding:5px;
    border:1px solid #ccc;
    box-shadow: 0 0 3px rgba(0,0,0,.3);
    -webkit-box-shadow: 0 0 3px rgba(0,0,0,.3);
    border-radius:3px;
    -webkit-border-radius:3px;
    position:absolute;
    font-size:12px;
    right:60px;
	top:-20px;
    display:none;
	cursor: pointer;
			background-color: #556270;
}
.tooltipe2 {
    width:340px;
    height:60px;
    padding:5px;
    border:1px solid #ccc;
    box-shadow: 0 0 3px rgba(0,0,0,.3);
    -webkit-box-shadow: 0 0 3px rgba(0,0,0,.3);
    border-radius:3px;
    -webkit-border-radius:3px;
    position:absolute;
    font-size:12px;
    top:-80px;
    display:none;
	cursor: pointer;
	background-color: #556270;
		
}



.tagsinput2{
background-color:#ff6a00;
}

.tagsinput {
	display: -webkit-box;
	display: -webkit-flex;
	display: -ms-flexbox;
	display: flex;
	-webkit-flex-wrap: wrap;
	-ms-flex-wrap: wrap;
	flex-wrap: wrap;
	box-sizing: border-box;
	background: #fff;
	font-family: sans-serif;
	font-size: 14px;
	line-height: 20px;
	color: #556270;
	padding: 5px 5px 0 5px;
	border: 1px solid #e6e6e6;
	border-radius: 2px;
}

.tagsinput.focus {
	border-color: #e6e6e6;
}

.tagsinput * {
	box-sizing: border-box;
}

.tagsinput .tag {
	position: relative;
	background:  #556270;
	display: block;
	max-width: 100%;
	word-wrap: break-word;
	color: #fff;
	padding: 5px 30px 5px 5px;
	border-radius: 2px;
	margin: 0 5px 5px 0;
}

.tagsinput .tag .tag-remove {
	position: absolute;
	background: none;
	display: block;
	width: 30px;
	height: 30px;
	top: 0;
	right: 0;
	cursor: pointer;
	text-decoration: none;
	text-align: center;
	color: white;
	line-height: 30px;
	padding: 0;
	border: 0;
}

.tagsinput .tag .tag-remove:before,
.tagsinput .tag .tag-remove:after {
	background: white;
	position: absolute;
	display: block;
	width: 10px;
	height: 2px;
	top: 14px;
	left: 10px;
	content: '';
}

.tagsinput .tag .tag-remove:before {
	-webkit-transform: rotateZ(45deg);
	transform: rotateZ(45deg);
}

.tagsinput .tag .tag-remove:after {
	-webkit-transform: rotateZ(-45deg);
	transform: rotateZ(-45deg);
}

.tagsinput div {
	-webkit-box-flex: 1;
	-webkit-flex-grow: 1;
	-ms-flex-positive: 1;
	flex-grow: 1;
}

.tagsinput div input {
	background: white;
	display: inline;
	width: 100%;
	font-size: 14px;
	line-height: 20px;
	padding: 5px;
	border: 0 none;
	margin: 0 5px 5px 0;
}

.tagsinput div input.error {
	color: #ff6b6b;
}

.tagsinput div input::-ms-clear {
	display: none;
}

.tagsinput div input::-webkit-input-placeholder {
	color: #ccc;
	opacity: 100%;
}

.tagsinput div input:-moz-placeholder {
	color: #ccc;
	opacity: 1.0;
}

.tagsinput div input::-moz-placeholder {
	color: #ccc;
	opacity: 1.0;
}

.tagsinput div input:-ms-input-placeholder {
	color: #ccc;
	opacity: 1.0;
}




.skill {
  
  border: 1px solid white;
  padding: 0 6px;
  margin-right: 2px;
  color: white;
  border-radius: 6px;
}
* {
  box-sizing: border-box;
}

body {
  font-family: Arial, Helvetica, sans-serif;
}

/* Float four columns side by side */
.column {
  float: left;
  width: 25%;
  padding: 0 10px;
}

/* Remove extra left and right margins, due to padding */
.row {margin: 0 -5px;}

/* Clear floats after the columns */
.row:after {
  content: "";
  display: table;
  clear: both;
}

/* Responsive columns */
@media screen and (max-width: 600px) {
  .column {
    width: 100%;
    display: block;
    margin-bottom: 20px;
  }
}

/* Style the counter cards */
.card {
  
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  padding: 16px;
  text-align: center;
  background-color: #f1f1f1;
}

  .card p {
    word-wrap: break-word;
  }

     

.card-box {
    padding: 10px;
    border-radius: 3px;
    margin-bottom: 20px;
    background-color: #fff;
	cursor:pointer;
}


.thumb-lg {
    height: 70px;
    width: 70px;
}
.img-thumbnail {
    padding: .10rem;
    background-color: #fff;
    border: 1px solid #dee2e6;
    border-radius: .10rem;
    max-width: 90%;
    height: auto;
}


.btn-rounded {

    border-radius: 1em;
	font-size:13px;
}
.text-muted {
    color: #98a6ad!important;
}

.porcentag {
			  float:right;   
			
			  
			  
			  
			   margin-left: 15px;
				
				
				
				font-size: 16px;
				line-height: 10px;
				
			 
}
			
			.tagator_element *{
			box-sizing:border-box;
			-moz-box-sizing:border-box;
			text-decoration:none
			}
			#tagator_dimmer{
			background-color:rgba(0,0,0,.1);
			width:100%;
			height:100%;
			position:fixed;
			z-index:100
			}
			.tagator_element{
			border:1px solid #abadb3;
			border-radius:3px;
			box-sizing:border-box;
			background-color:#fff;
			display:inline-block;
			text-decoration:none
			}
			.tagator_element.options-visible{
			position:relative;z-index:101
			}
			.tagator_tags{
			display:inline
			}
			.tagator_tag{
			display:inline-block;
			background-color:#39f;  
			border-radius:2px;
			color:#fff;
			padding:2px 20px 2px 4px;
			font-size:13px;
			margin:2px;
			position:relative;
			vertical-align:top
			}.tagator_tag_remove{
			display:inline-block;
			font-weight:bold;
			color:#fff;
			margin:0 0 0 5px;padding:6px 5px 4px 5px;cursor:pointer;font-size:11px;line-height:10px;vertical-align:top;border-radius:0 2px 2px 0;position:absolute;right:0;top:0;bottom:0}.tagator_tag_remove:hover{color:#000;background-color:#8cf}.tagator_input,.tagator_textlength{border:0;display:inline-block;margin:0;background-color:transparent;font-size:13px;outline:0;padding:4px 0 0 5px}.tagator_options{margin:0;padding:0;border:1px solid #7f9db9;border-radius:0 0 3px 3px;font-family:sans-serif;position:absolute;box-sizing:border-box;-moz-box-sizing:border-box;z-index:101;background-color:#fff;overflow:auto;max-height:250px;list-style:none;left:-1px;right:-1px}.tagator_element.options-hidden .tagator_options{display:none}.tagator_option{padding:5px;cursor:pointer;color:#000}.tagator_option.active{background-color:#39f;color:#fff}
		
</style>
  
  
  
</head>



<body onload="myFunction()" class="hold-transition sidebar-mini">





  <!-- Navbar -->
  <nav class="main-header navbar navbar-expand navbar-white navbar-light">
    <!-- Left navbar links -->
    <ul class="navbar-nav">
      <li class="nav-item">
        <a class="nav-link" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
      </li>
    
    </ul>

    <!-- Right navbar links -->
    <ul class="navbar-nav ml-auto">
      <!-- Navbar Search -->
 

      <!-- Messages Dropdown Menu -->
      <li class="nav-item dropdown">
        <a class="nav-link" data-toggle="dropdown" href="#">
          <i class="far fa-comments"></i>
          <span class="badge badge-danger navbar-badge">3</span>
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
          <a href="#" class="dropdown-item">
            <!-- Message Start -->
            <div class="media">
              <img src="#" alt="User Avatar" class="img-size-50 mr-3 img-circle">
              <div class="media-body">
                <h3 class="dropdown-item-title">
                  Brad Diesel
                  <span class="float-right text-sm text-danger"><i class="fas fa-star"></i></span>
                </h3>
                <p class="text-sm">Call me whenever you can...</p>
                <p class="text-sm text-muted"><i class="far fa-clock mr-1"></i> 4 Hours Ago</p>
              </div>
            </div>
            <!-- Message End -->
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item">
            <!-- Message Start -->
            <div class="media">
              <img src="#" alt="User Avatar" class="img-size-50 img-circle mr-3">
              <div class="media-body">
                <h3 class="dropdown-item-title">
                  John Pierce
                  <span class="float-right text-sm text-muted"><i class="fas fa-star"></i></span>
                </h3>
                <p class="text-sm">I got your message bro</p>
                <p class="text-sm text-muted"><i class="far fa-clock mr-1"></i> 4 Hours Ago</p>
              </div>
            </div>
            <!-- Message End -->
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item">
            <!-- Message Start -->
            <div class="media">
              <img src="#" alt="User Avatar" class="img-size-50 img-circle mr-3">
              <div class="media-body">
                <h3 class="dropdown-item-title">
                  Nora Silvester
                  <span class="float-right text-sm text-warning"><i class="fas fa-star"></i></span>
                </h3>
                <p class="text-sm">The subject goes here</p>
                <p class="text-sm text-muted"><i class="far fa-clock mr-1"></i> 4 Hours Ago</p>
              </div>
            </div>
            <!-- Message End -->
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item dropdown-footer">See All Messages</a>
        </div>
      </li>
      <!-- Notifications Dropdown Menu -->
      <li class="nav-item dropdown">
        <a class="nav-link" data-toggle="dropdown" href="#">
          <i class="far fa-bell"></i>
          <span class="badge badge-warning navbar-badge">15</span>
        </a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
          <span class="dropdown-item dropdown-header">15 Notifications</span>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item">
            <i class="fas fa-envelope mr-2"></i> 4 new messages
            <span class="float-right text-muted text-sm">3 mins</span>
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item">
            <i class="fas fa-users mr-2"></i> 8 friend requests
            <span class="float-right text-muted text-sm">12 hours</span>
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item">
            <i class="fas fa-file mr-2"></i> 3 new reports
            <span class="float-right text-muted text-sm">2 days</span>
          </a>
          <div class="dropdown-divider"></div>
          <a href="#" class="dropdown-item dropdown-footer">See All Notifications</a>
        </div>
      </li>
      <li class="nav-item">
        <a class="nav-link" data-widget="fullscreen" href="#" role="button">
          <i class="fas fa-expand-arrows-alt"></i>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" data-widget="control-sidebar" data-slide="true" href="#" role="button">
          <i class="fas fa-th-large"></i>
        </a>
      </li>
    </ul>
  </nav>
  <!-- /.navbar -->

  <!-- Main Sidebar Container -->
  <aside class="main-sidebar sidebar-dark-primary elevation-4">
    <!-- Brand Logo -->
    <a href="#" class="brand-link">
      <img src="https://as1.ftcdn.net/jpg/02/18/23/06/500_F_218230681_UrFaxawyNMGAN6lRIAk99or1eT9VxMCI.jpg" alt=" Logo" class="brand-image img-circle elevation-3" style="opacity: .8">
      <span class="brand-text font-weight-light">Team Plus</span>
    </a>

    <!-- Sidebar -->
    <div class="sidebar">
      <!-- Sidebar user panel (optional) -->
      <div class="user-panel mt-3 pb-3 mb-3 d-flex">
        <div class="image">
          <img src="https://felipeomc.github.io/te/user2-160x160.jpg" class="img-circle elevation-2" alt="User Image">
        </div>
        <div class="info">
			<a href="#" id="nome_usuario2"  style="color:#fff" value="" class="d-block" ></a>
			<a href="#" id="perfil_usuario2"  style="color:#fff" value="" class="d-block" ></a>
        </div>
      </div>

      <!-- SidebarSearch Form -->
      <!-- Sidebar Menu -->
      <nav class="mt-2">
        <ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false">
		<!--<li class="nav-item">
            <a href="people.html" class="nav-link">
              <i class="nav-icon fas fa-th"></i>
              <p>
                People
                <span class="right badge badge-danger"></span>
              </p>
            </a>
          </li>-->
		  <li class="nav-item">
            <a href="/projeto2" id="proj" class="nav-link" onclick="exibirProjetos()">
              <i class="nav-icon fas fa-copy"></i>
              <p>
                Projects
                <span class="right badge badge-danger"></span>
              </p>
            </a>
          </li>
		  <!--<li class="nav-item">
            <a href="form.html" class="nav-link">
              <i class="nav-icon fas fa-table"></i>
              <p>
               Form teams
                <span class="badge badge-info right">+</span>
              </p>
            </a>
          </li>-->
		  <li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
		<li class="nav-item">
            <a  class="nav-link">
              <i class="nav-icon "></i>
              <p>
			
				<i class="fas "></i>
              </p>
            </a>
		</li>
        </ul>
      </nav>
      <!-- /.sidebar-menu -->
    </div>
    <!-- /.sidebar -->
  </aside>





  
<div class="content-wrapper" style="display:block"  id="pg1">
    <!-- Content Header (Page header) -->   
  <section class="content-header " >

  <form class="form-row elevation-1" action="/form" method="post">

	<div class="container"  ><!--mudei aqui-->

    <div class="row">
          <div class="col-auto">
            <legend class=" col-form-label  ">Project Title:</legend>
            <input id="title"   style="width:202px;"  class="form-control"  type="text" name="nome" value="" data-role="" autocomplete="off">
          </div>
          <div class="col-auto">
            <legend class=" col-form-label ">Nature:</legend> 
            <select id="natureza"  class="form-control" name="natureza"  style="width:206px;" >
                                      <option value="0">Similar technology</option>
                                      <option value="1">Project already done</option>
                                      <option value="2">New technology</option>
            </select>
          </div>
          <div class="col-auto">
            <legend class=" col-form-label" >Date begin:</legend>
              <div class="dates" >
                <input type="text" style="width:120px;" class="form-control" id="usr1" type="year" value="" name="inicio"  placeholder="YYYY" autocomplete="off" >
              </div>
          </div>
        <div class="col-auto">
            <legend class=" col-form-label" >Date end:</legend>
              <div class="dates" >
                
                <input type="text" style="width:120px;" class="form-control" id="usr2" type="year" value="" name="fim" placeholder="YYYY" autocomplete="off" >
              </div>
          </div>
        <div class="col-auto">	
        </div>
        <div class="col-auto">	
          <input id="equipeselecionada" type="hidden" name="equipeselecionada" placeholder="equipe" rows="4" col="150" > 
          
          <input id="data_do_projeto" type="hidden" name="data_do_projeto" placeholder="data" rows="4" col="150" >
          <input id="percentual_da_equipe" type="hidden" name="percentual_da_equipe" placeholder="percentual_da_equipe" rows="4" col="150" >
          
        </div>
    </div>
    
    <div class="row">
        <div class="col">
              <legend class=" col-form-label ">Technologies:</legend>
              <input  id="entrada"  class="tagator form-control" name="tags"    data-role="tagsinput"  value="" data-tagator-show-all-options-on-focus="true" data-tagator-autocomplete="[
              'Java','iOS','Android','Web','Mobile',
              'WordPress', 'Chrome OS','Desktop', 'Raspberry Pi','Angular', 'Angular 2', 'JavaScript',
                'MVC','MongoDB', 'Node.js', 'RESTful APIs', 'Spring Java', 'SQL', 'Lua', 'Swift',
              'Objective-C','Kotlin', 'MATLAB',  'Python', 'TypeScript','CouchDB',
              'E-commerce','PostgreSQL','.NET', 'IoT','HTML','Ruby','RFID','Microsoft Access',
                'JSON','C++','Ruby','CSS'
                  ] ">
                    
        </div>
        <div class="col">
          <legend class=" col-form-label ">Methodology:</legend>
          <input id="method_proj"  class="tagator form-control " name="method_proj"    data-role="tagsinput2"  value="" data-tagator-show-all-options-on-focus="true" data-tagator-autocomplete="[
                          'Scrum', 'Kanban', 'XP'					 
                          ] ">  
        </div>   
        <div class="col">
        </div>
    </div>
    <div class="row">
        <div class="col">	
            <legend class="col-form-label">Size by Level:</legend>
        </div>
    </div>
    <div class="row">
        <div class="col-auto">
          <legend class="col-form-label">Developer:</legend>
        </div>
        
        <div class="col-auto">				
              <legend class="col-form-label">Master</legend>
              <select id="DevMast" class="form-control " aria-label="Default select example">
                  <option value="0">0</option>
                  <option value="1">1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>

              </select>
          </div>
          <div class="col-auto">				
              <legend class="col-form-label">Senior</legend> 
              <select id="DevSeni" class="form-control " aria-label="Default select example">
                  <option value="0">0</option>
                  <option value="1">1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>

              </select>
          </div>
          <div class="col-auto">				
            <legend class="col-form-label">Full</legend> 
            <select id="DevPleno" class="form-control " aria-label="Default select example">
                  <option value="0">0</option>
                  <option value="1">1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>

            </select>
          </div>					
          <div class="col-auto">				
            <legend class="col-form-label">Junior</legend> 
            <select id="DevJuni" class="form-control " aria-label="Default select example">
                  <option value="0">0</option>
                  <option value="1">1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
            </select>
          </div>
      </div>
      <div class="row">
        <div class="col">	
            <legend class="col-form-label"> </legend>
        </div>
      </div>
    
     <div class="row">
                <input type="hidden" id="action" name="action" value="create">
                <div class="col-auto">
                    
                    <!-- Botões de ação -->
                    <button type="submit" id="salvarprojeto" style="display:block" class="btn btn-primary">Create project</button>
    
    
                </div>
              <div class="col-auto">
                    
                   <button type="submit" id="atualizarprojeto" style="display:none" class="btn btn-primary">Update project</button>
              </div>
              <div class="col-auto">
                    <button  type="button" id="botao" class="btn btn-primary"   ><span class="glyphicon glyphicon-user" ></span>View suggestions</button>
              </div>
              <div id="similarprojects" class="col-auto" style="display:block">
                <button id="defaultdemo" type="button" class="btn btn-primary">See similar projects</button>
              </div>
    </div>
    <div class="row">
      <div class="col">	
          <legend class="col-form-label"> </legend>
      </div>
    </div>
  </div>


</form>
</section> <!--fecha a linha do form-->   

 
<script>
 document.addEventListener('DOMContentLoaded', function() {
    var salvarProjetoBtn = document.getElementById('salvarprojeto');
    var atualizarProjetoBtn = document.getElementById('atualizarprojeto');
    var actionField = document.getElementById('action');

    salvarProjetoBtn.addEventListener('click', function() {
        actionField.value = 'create';
    });

    atualizarProjetoBtn.addEventListener('click', function() {
        actionField.value = 'update';
  });
});  
document.getElementById('botao').addEventListener('click', function() {
              botao();
});

   </script>
			<div class="row " id="sugestao1" style="display:none;">
			
				<div class="card card-primary">
				
					<div class="card-header">
						
						<h4 class="card-title">Suggestion #1</h4>
						
						
							
					
						<div class="col">	
						<button  type="submit" id="salvarequipe" class="btn btn-primary" onclick="salvarequipe()"  ><span class="glyphicon "></span> save team</button>
                  
                  <span id="fitnessTotal_equipe1"style="color:white; font-weight: bold; " title=" " class="porcentag tipe"> </span><div  class="tooltipe btn-primary"></div>							
                 
                  <span id="peso_social_equipe1" style="color:white; font-weight: bold; " title=" " class="porcentag tipe">  </span><div  class="tooltipe btn-primary"></div>							
                      
									<span id="percentual_equipe1" style="color:white; font-weight: bold; " title=" " class="porcentag tipe"><div  class="tooltipe btn-primary"></div>							
								</div>
					</div>
				 <div  id="sugest1" class="sugestao_1 card-body  col" style="display:block;">
				 	
								
					
					  
					  
					  
					   
					  
					   
				  </div>
				</div>
			</div>
			


			<div class="row " id="sugestao2" style="display:none;">
			
				<div class="card card-primary">
				
					<div class="card-header">
						
						<h4 class="card-title">Suggestion #2</h4>
						
						
							
					
						<div class="col">	
						<button  type="submit" id="salvarequipe2" class="btn btn-primary" onclick="salvarequipe()"  ><span class="glyphicon "></span> save team</button>
                  <span id="fitnessTotal_equipe2"style="color:white; font-weight: bold; " title=" " class="porcentag tipe"> </span><div  class="tooltipe btn-primary"></div>							
                            
                  
                  <span id="peso_social_equipe2" style="color:white; font-weight: bold; " title=" " class="porcentag tipe">  </span><div  class="tooltipe btn-primary"></div>							
                            
									<span id="percentual_equipe2" style="color:white; font-weight: bold; " title=" " class="porcentag tipe"><div  class="tooltipe btn-primary"></div>	
									<!--<span id="percentual_equipe2" style="color:white; font-weight: bold; cursor: pointer;" title=" percentage = team fitness *100 / fitness max" class="porcentag tipe">%</span><div  class="tooltipe btn-primary">$$percentage = {{fitness *100 } \over\,\,fitness\,\,max\,}.$$</div>	-->						
								</div>
					</div>
				 <div  id="sugest2" class="sugestao_2 card-body  col" style="display:block;">
				 	
								
					
					  
					  
					  
					   
					  
					   
				  </div>
				</div>
			</div>

			
</div>
			
			
			
</div>			

	










 
<script>


//======================================================================================
//======================================================================================
//                             update projects









	function salvarprojeto(){

		

		$('#data_do_projeto').val(date);
		
		var aux = localStorage.getItem('valueTexto');
						
			$('#equipeselecionada').val(aux);


		if (localStorage.getItem('valueTexto')==''){
			var salva2 = confirm("Create project without team?");
			
			if (salva2==true){
				alert("Project without team created sucessfull! ");
				add_item(); 
			}
			if (salva2!=true){
				alert("Project without team  don't created!");
				
			}
			
		}
		if (localStorage.getItem('valueTexto')!=''){
			var salva = confirm("Create project?");
			
			
			
			if (salva==true){
				alert("Project created sucessfull! ");
				add_item(); 
			}
			if (salva!=true){
				alert("Project don't created! ");
				
			}
		}
	}

  function atualizarprojeto(){

            

        $('#data_do_projeto').val(date);

        var aux = localStorage.getItem('valueTexto');
                
          $('#equipeselecionada').val(aux);
        
          add_item(); 

        
        
        
}
		

		function exibirProjetos() {
			document.getElementById("projects").style.visibility ="visible";
			document.getElementById("pg1").style.display = "none";
			clearFields();
			
			
		}



		

		function exibirForm() {

			
      document.getElementById("salvarprojeto").style.display = "block";

		
	
			
			//localStorage.setItem('valueTexto', '');
			//localStorage.setItem('valueText', '');
			
			document.getElementById("pg1").style.display = "block";
			
			
			clearFields();
			
			
			document.getElementById("sugestao1").style.display = "none";
			document.getElementById("sugestao2").style.display = "none";
			
			
			document.getElementById("projects").style.visibility ="hidden";
			
		}
		function create(){
     
      document.getElementById("atualizarprojeto").style.display = "none";
      document.getElementById("salvarprojeto").style.display = "block";

    }
		function update_project() {
			    
      
      document.getElementById("salvarprojeto").style.display = "none";
				document.getElementById("atualizarprojeto").style.display = "block";

				
				document.getElementById('title').value = localStorage.getItem('name_update');
				document.getElementById('method_proj').value = localStorage.getItem('method_proj');
				
				
				//document.getElementById('natureza').value = localStorage.getItem('nature_update');
				
				
				document.getElementById('entrada').value = localStorage.getItem('technoogies_update');
				
				
				
				document.getElementById('usr1').value = localStorage.getItem('date_begin_update');
				
				document.getElementById('usr2').value = localStorage.getItem('date_end_update');
			
				
				
				
				document.getElementById('DevMast').value = localStorage.getItem('qtd_mas');
				
				document.getElementById('DevPleno').value = localStorage.getItem('qtd_ple');
				
				document.getElementById('DevSeni').value = localStorage.getItem('qtd_sen');
				
				document.getElementById('DevJuni').value = localStorage.getItem('qtd_jun');
				
					
			
			
			
			
			document.getElementById("pg1").style.display = "block";
			
			
			//inicia();
			
			document.getElementById("projects").style.visibility ="hidden";
			document.getElementById("sugestao1").style.display = "block";
					document.getElementById("sugestao2").style.display = "block";
			
			
		}
		
		
		
		
		function clearFields()  
		{   
			
			document.getElementById('title').value = "";
			document.getElementById('method_proj').value = "";

			
			//document.getElementById('natureza').value = "";
			document.getElementById('entrada').value = "";
			document.getElementById('entrada2').value = "";
			
			document.getElementById('usr1').value = "";
			document.getElementById('usr2').value = "";
			
			document.getElementById('DevJuni').value = 0;
			document.getElementById('DevMast').value = 0;
			document.getElementById('DevPleno').value = 0;
			document.getElementById('DevSeni').value = 0;
						
						
		
			
		
		
			
		} 
	
</script>



 <textarea id="txtdigitado" type="search" Style="Display:none;" placeholder="Search" rows="4" col="50" ></textarea> 
<textarea id="txtdigitado2" type="search" Style="Display:none;" placeholder="Search" rows="4" col="50" ></textarea> 


		
	<script>






	</script>
 



<script>

		
	/*
 Tagator jQuery Plugin
 A plugin to make input elements, tag holders
 version 1.2, Aug 9th, 2016
 by Ingi á Steinamørk

 The MIT License (MIT)

 Copyright (c) 2014 Qodio

 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
 the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 the Software, and to permit persons to whom the Software is furnished to do so,
 subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */



 

 window.onload = function() {

	var texto1 = ''	
	var users3 = ''	
  $.getJSON('/users3', function(data2) {
                
                
                users3 = JSON.stringify(data2);
              
            
  })
	



	$.getJSON('/out_file', function(data) {
				   
	   //alert('conseguiu outfile')
	   texto1 = JSON.stringify(data);
	   //alert(texto1)

      

	preenche_Update(texto1,users3)
	$.tagator()
	$.tagator().refreshTags()	

	$(function () {
		tagator();
	});

   })

  
}

function preenche_Update(texto1,users3){
  

	var ghet = [JSON.parse(texto1)]	
  //alert('ghet')
//alert(JSON.stringify(ghet))
//alert(ghet[0].name)

$("#title").val(ghet[0].name) 

$("#percentual_equipe1").html(ghet[0].percentual);

if (ghet[0].nature == "Similar technology"){
	$("#natureza").val(0)
}
if (ghet[0].nature == "Project already done"){
	$("#natureza").val(1)
}
if (ghet[0].nature == "New technology"){
	$("#natureza").val(2)
}


$("#usr1").val(ghet[0].begin) 
$("#usr2").val(ghet[0].end) 

// Função para capitalizar a primeira letra de cada palavra
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
}

var technologies = ghet[0].technologies;
var methodologies = ghet[0].method_proj;
// Capitaliza a primeira letra de 'methodologies'
methodologies = capitalizeFirstLetter(methodologies);
// Verifica se 'technologies' contém vírgulas
if (technologies.includes(',')) {
    technologies = technologies.split(',');
} else {
    // Se não contém vírgulas, usa um array com um único elemento
    technologies = [technologies];
}

// Verifica se 'methodologies' contém vírgulas
if (methodologies.includes(',')) {
  methodologies = methodologies.split(',');
} else {
    // Se não contém vírgulas, usa um array com um único elemento
    methodologies = [methodologies];
}

// Atualiza o valor do elemento de origem e dispara um evento change
var $entrada = $('#entrada'); // Supondo que este seja o elemento de origem
$entrada.val(technologies.join(',')).change();

// Para 'methodologies', como parece ser uma única palavra, pode ser definido diretamente
var $method_proj = $('#method_proj'); // Supondo que este seja o elemento de origem
$method_proj.val(methodologies.join(',')).change();



$("#equipeselecionada").val(ghet[0].team)



//import('populacao.js')// importa a base de dados

for (let i = 0; i < ghet[0].team.length; i++) {
	

	
}
var equipeUpdate = []
var NivelequipeUpdate = []

let pessoa = JSON.parse(users3)
alert('pessoa')
alert(pessoa)

pessoa = pessoa.map(obj => {
  if (obj.name) {
    obj.username = obj.name;
    delete obj.name;
  }
  return obj;
});

//alert(pessoa.length)

//alert(ghet[0].team)

ghet[0].team = ghet[0].team.split(",");

ghet[0].team = ghet[0].team.map(username => {
    // Substitui espaço por ponto para corresponder ao formato em 'pessoa'
    return username.replace(' ', '.');
});

// Criar um mapa para fácil acesso por username
const pessoaMap = new Map(pessoa.map(obj => [obj.username, obj]));

// Percorrer a equipe em ghet[0].team
for (let i = 0; i < ghet[0].team.length; i++) {
    const username = ghet[0].team[i];
    const pessoaObj = pessoaMap.get(username);

    // Verificar se encontrou a pessoa com o username correspondente
    if (pessoaObj) {
        //alert(username, 'e', pessoaObj.username); // Usando console.log para debugging
        equipeUpdate.push(pessoaObj.username);
        NivelequipeUpdate.push(pessoaObj.contractRoleName);
    } else {
        //alert('Username não encontrado:', username);
    }
}


//alert('NivelequipeUpdate')

//alert(NivelequipeUpdate)



let contagemNiveis = {
    master: 0,
    senior: 0,
    middle: 0,
    junior: 0
};

// Contando as ocorrências de cada nível
NivelequipeUpdate.forEach(nivel => {
  let nivelLowerCase = nivel.toLowerCase();
        if (contagemNiveis.hasOwnProperty(nivelLowerCase)) {
            contagemNiveis[nivelLowerCase]++;

           // alert('contagemNiveis')
        
      //  alert(JSON.stringify(contagemNiveis))
        }
    
});

// Atualizando os valores nos campos correspondentes

$("#DevMast").val(contagemNiveis.master);
$("#DevSeni").val(contagemNiveis.senior);
$("#DevPleno").val(contagemNiveis.middle);
$("#DevJuni").val(contagemNiveis.junior);

//apresenta a equipe selecinada p update como cards na sugest 1

document.getElementById("sugestao1").style.display = "block";
document.getElementById("sugestao2").style.display = "none";

document.getElementById("atualizarprojeto").style.display = "block";


let divPai = $('.sugestao_1');

//alert(equipeUpdate)
//alert(equipeUpdate.length)
/*
for(let i=0; i< equipeUpdate.length; i++){
  let perfil = ' '
  let level = ' '
  let contractRole = ' '
  let skilltec = ''
  let id = ''
  
  for (let j=0; j<pessoa.length; j++){
    if( equipeUpdate[i] == pessoa[j].name){ 
      id = equipeUpdate[i]
      perfil= pessoa[j].perfil
      level= pessoa[j].level
      contractRole = pessoa[j].contractRole
      skilltec = (pessoa[j].hardskill)   
    }
  }
  divPai.append( "<div id='"+id+"' class='column' style='cursor:pointer; z-index: 1; display:block;'><div class='card'><div class='row'><div class='col'><div  class='tooltipe2 btn-primary' ></div></div></div><div class='row' style='justify-content: center;'><img style='width: 20%' src='https://felipeomc.github.io/teamplus/avatar.png' class='rounded-circle img-thumbnail ' alt='...'></div><div class='row' style='justify-content: center;'><h4>"+equipeUpdate[i].toUpperCase()+"</h4></div><div class='row' style='justify-content: center;'><h5 class='row'>"+ perfil+" "+level+"</h5></div> <div class='row' style='justify-content: center;'><h5 class='row'>"+ contractRole+"</h5></div> <div class='row' style='justify-content: left;'><h5 class='row capitalized'>" + skilltec+"</h5></div></div></div></div>")
  $("#"+id).draggable();
  //$("#natureza").val('')
}
*/
//alert(JSON.stringify(pessoa))
// Criar um mapa a partir de 'pessoa'
const pessoaMap2 = new Map();
pessoa.forEach(p => {
    pessoaMap2.set(p.username, p);
});

// Debugging
console.log("Equipe Update: ", equipeUpdate);
console.log("Tamanho da Equipe: ", equipeUpdate.length);

// Buscar e processar informações para cada membro da equipe
// Buscar e processar informações para cada membro da equipe
for (let i = 0; i < equipeUpdate.length; i++) {
    let membro = pessoaMap2.get(equipeUpdate[i]);

    if (membro) {
        let id = equipeUpdate[i];
        let perfil = membro.contractRoleName === "Project Manager" ? "Project Manager" : "Developer";
        
        let level = membro.contractRoleName;
        
        let skilltecArray = membro.hardskill;

        // Removendo habilidades duplicadas usando um Set
        let uniqueSkills = [...new Set(skilltecArray)];

        // Criando e adicionando o cartão ao 'divPai'
        let cardHtml = "<div id='"+id+"' class='column' style='cursor:pointer; z-index: 1; display:block;'><div class='card'><div class='row'><div class='col'><div  class='tooltipe2 btn-primary' ></div></div></div><div class='row' style='justify-content: center;'><img style='width: 20%' src='https://felipeomc.github.io/teamplus/avatar.png' class='rounded-circle img-thumbnail ' alt='...'></div><div class='row' style='justify-content: center;'><h4>"+equipeUpdate[i].toUpperCase()+"</h4></div><div class='row' style='justify-content: center;'><h5 class='row'>"+ perfil+" "+level+"</h5></div> <div class='row' style='justify-content: center;'><h5 class='row'></h5></div> <div class='row' style='justify-content: left;'><h5 class='row capitalized'>" + uniqueSkills.join(", ")+"</h5></div></div></div></div>";
        divPai.append(cardHtml);
        $("#"+id).draggable();
    } else {
        console.log("Membro não encontrado: ", equipeUpdate[i]);
    }
}





}



  
  // Function to be executed
  $(window).on("load", function(){


(function ($) {


	$.tagator = function (source_element, options) {
		var defaults = {
			prefix:                'tagator_',
			height:                'auto',
			useDimmer:             false,
			showAllOptionsOnFocus: false,
			allowAutocompleteOnly: false,
			autocomplete:          []
		};

		var self = this;
		var selected_index = -1;
		var $source_element = $(source_element);
		var $tagator_element = null;
		var $tags_element = null;
		var $placeholder_element = null;
		var $input_element = null;
		var $textlength_element = null;
		var $options_element = null;
		var key = {
			backspace: 8,
			enter:     13,
			escape:    27,
			left:      37,
			up:        38,
			right:     39,
			down:      40,
			comma:     188
		};
		self.settings = {};


		// INITIALIZE PLUGIN
		self.init = function () {
			self.settings = $.extend({}, defaults, options);

			//// ================== CREATE ELEMENTS ================== ////
			// dimmer
			if (self.settings.useDimmer) {
				if ($('#' + self.settings.prefix + 'dimmer').length === 0) {
					var $dimmer_element = $(document.createElement('div'));
					$dimmer_element.attr('id', self.settings.prefix + 'dimmer');
					$dimmer_element.hide();
					$(document.body).prepend($dimmer_element);
				}
			}
			// box element
			$tagator_element = $(document.createElement('div'));
			if ($source_element[0].id !== undefined) {
				$tagator_element.attr('id', self.settings.prefix + $source_element[0].id);
			}
			$tagator_element.addClass(self.settings.prefix + 'element options-hidden');
			$tagator_element.css({
				padding:     $source_element.css('padding'),
				'flex-grow': $source_element.css('flex-grow'),
				position:    'relative'
			});
			if (parseInt($source_element.css('width')) !== 0) {
				$tagator_element.css({
					width: $source_element.css('width')
				});
			}
			if (self.settings.height === 'element') {
				$tagator_element.css({
					height: $source_element.outerHeight + 'px'
				});
			}
			$source_element.after($tagator_element);
			$source_element.hide();
			// textlength element
			$textlength_element = $(document.createElement('span'));
			$textlength_element.addClass(self.settings.prefix + 'textlength');
			$textlength_element.css({
				position:   'absolute',
				visibility: 'hidden'
			});
			$tagator_element.append($textlength_element);
			// tags element
			$tags_element = $(document.createElement('div'));
			$tags_element.addClass(self.settings.prefix + 'tags');
			$tagator_element.append($tags_element);
			// placeholder element
			$placeholder_element = $(document.createElement('div'));
			$placeholder_element.addClass(self.settings.prefix + 'placeholder');
			$tagator_element.append($placeholder_element);
			// input element
			$input_element = $(document.createElement('input'));
			$input_element.addClass(self.settings.prefix + 'input');
			$input_element.width(20);
			$input_element.attr('autocomplete', 'false');
			$tagator_element.append($input_element);
			// options element
			$options_element = $(document.createElement('ul'));
			$options_element.addClass(self.settings.prefix + 'options');

			$tagator_element.append($options_element);

			//// ================== BIND ELEMENTS EVENTS ================== ////
			// source element
			$source_element.change(function () {
				refreshTags();
			});
			// box element
			$tagator_element.bind('focus', function (e) {
				e.preventDefault();
				e.stopPropagation();
				showOptions();
				$input_element.focus();
			});
			$tagator_element.bind('mousedown', function (e) {
				e.preventDefault();
				e.stopPropagation();
				$input_element.focus();
				if ($input_element[0].setSelectionRange) {
					$input_element.focus();
					$input_element[0].setSelectionRange($input_element.val().length, $input_element.val().length);
				} else if ($input_element[0].createTextRange) {
					var range = $input_element[0].createTextRange();
					range.collapse(true);
					range.moveEnd('character', $input_element.val().length);
					range.moveStart('character', $input_element.val().length);
					range.select();
				}
			});
			$tagator_element.bind('mouseup', function (e) {
				e.preventDefault();
				e.stopPropagation();
			});
			$tagator_element.bind('click', function (e) {
				e.preventDefault();
				e.stopPropagation();
				if (self.settings.showAllOptionsOnFocus) {
					//showOptions();
					searchOptions();
				}
				$input_element.focus();
			});
			$tagator_element.bind('dblclick', function (e) {
				e.preventDefault();
				e.stopPropagation();
				$input_element.focus();
				$input_element.select();
			});
			// input element
			$input_element.bind('click', function (e) {
				e.preventDefault();
				e.stopPropagation();
			});
			$input_element.bind('dblclick', function (e) {
				e.preventDefault();
				e.stopPropagation();
			});
			$input_element.bind('keydown', function (e) {
				e.stopPropagation();
				var keyCode = e.keyCode || e.which;
				switch (keyCode) {
					case key.up:
						e.preventDefault();
						if (selected_index > -1) {
							selected_index = selected_index - 1;
						} else {
							selected_index = $options_element.find('.' + self.settings.prefix + 'option').length - 1;
						}
						refreshActiveOption();
						scrollToActiveOption();
						break;
					case key.down:
						e.preventDefault();
						if (selected_index < $options_element.find('.' + self.settings.prefix + 'option').length - 1) {
							selected_index = selected_index + 1;
						} else {
							selected_index = -1;
						}
						refreshActiveOption();
						scrollToActiveOption();
						break;
					case key.escape:
						e.preventDefault();
						break;
					case key.comma:
						e.preventDefault();
						if (selected_index === -1) {
							if ($input_element.val() !== '') {
								addTag($input_element.val());
							}
						}
						resizeInput();
						break;
					case key.enter:
						e.preventDefault();
						if (selected_index !== -1) {
							selectOption();
						} else {
							if ($input_element.val() !== '') {
								addTag($input_element.val());
							}
						}
						resizeInput();
						break;
					case key.backspace:
						if ($input_element.val() === '') {
							$source_element.val($source_element.val().substring(0, $source_element.val().lastIndexOf(',')));
							$source_element.trigger('change');
							searchOptions();
						}
						resizeInput();
						break;
					default:
						resizeInput();
						break;
				}
				refreshPlaceholder();
			});
			$input_element.bind('keyup', function (e) {
				e.preventDefault();
				e.stopPropagation();
				var keyCode = e.keyCode || e.which;
				if (keyCode === key.escape || keyCode === key.enter) {
					hideOptions();
				} else if (keyCode < 37 || keyCode > 40) {
					searchOptions();
				}
				if ($tagator_element.hasClass('options-hidden') && (keyCode === key.left || keyCode === key.right || keyCode === key.up || keyCode === key.down)) {
					searchOptions();
				}
				resizeInput();
				refreshPlaceholder();
			});
			$input_element.bind('focus', function (e) {
				e.preventDefault();
				e.stopPropagation();
				if (!$options_element.is(':empty') || self.settings.showAllOptionsOnFocus) {
					searchOptions();
					showOptions();
				}
			});
			$input_element.bind('blur', function (e) {
				e.preventDefault();
				e.stopPropagation();
				hideOptions();
			});
			refreshTags();
		};


		// RESIZE INPUT
		var resizeInput = function () {
			$textlength_element.html($input_element.val());
			$input_element.css({width: ($textlength_element.width() + 20) + 'px'});
		};


		// SET AUTOCOMPLETE LIST
		self.autocomplete = function (autocomplete) {
			self.settings.autocomplete = autocomplete !== undefined ? autocomplete : [];
		};


		// REFRESH TAGS
		self.refresh = function () {
			refreshTags(); 
		};
		var refreshTags = function () {
			$tags_element.empty();
			var tags = $source_element.val().split(',');
			$.each(tags, function (key, value) {
				if (value !== '' && checkAllowedTag(value)) {
					var $tag_element = $(document.createElement('div'));
					$tag_element.addClass(self.settings.prefix + 'tag');
					$tag_element.html(value);
					// remove button
					var $button_remove_element = $(document.createElement('div'));
					$button_remove_element.data('text', value);
					$button_remove_element.addClass(self.settings.prefix + 'tag_remove');
					$button_remove_element.bind('mousedown', function (e) {
						e.preventDefault();
						e.stopPropagation();
					});
					$button_remove_element.bind('mouseup', function (e) {
						e.preventDefault();
						e.stopPropagation();
						removeTag($(this).data('text'));
						$source_element.trigger('change');
					});
					$button_remove_element.html('X');
					$tag_element.append($button_remove_element);
					// clear
					var $clear_element = $(document.createElement('div'));
					$clear_element.css('clear', 'both');
					$tag_element.append($clear_element);

					$tags_element.append($tag_element);
				}
			});
			refreshPlaceholder(); 
			searchOptions();
		};

		// REFRESH PLACEHOLDER
		var refreshPlaceholder = function () {
			if ($tags_element.is(':empty') && !$input_element.val() && $source_element.attr('placeholder')) {
				$placeholder_element.html($source_element.attr('placeholder'));
				$placeholder_element.show();
			} else {
				$placeholder_element.hide();
			}
		};

		// REMOVE TAG FROM ORIGINAL ELEMENT
		var removeTag = function (text) {
			var tagsBefore = $source_element.val().split(',');
			var tagsAfter = [];
			$.each(tagsBefore, function (key, value) {
				if (value !== text && value !== '') {
					tagsAfter.push(value);
				}
			});
			$source_element.val(tagsAfter.join(','));
		};

		// CHECK IF TAG IS PRESENT
		var hasTag = function (text) {
			var tags = $source_element.val().split(',');
			var hasTag = false;
			$.each(tags, function (key, value) {
				if ($.trim(value) === $.trim(text)) {
					hasTag = true;
				}
			});
			return hasTag;
		};

		// CHECK IF TAG IS ALLOWED
		var checkAllowedTag = function (text) {
			if (!self.settings.allowAutocompleteOnly) {
				return true;
			}

			var checkAllowedTag = false;
			$.each(self.settings.autocomplete, function (key, value) {
				if ($.trim(value) === $.trim(text)) {
					checkAllowedTag = true;
				}
			});
			return checkAllowedTag;
		};

		// ADD TAG TO ORIGINAL ELEMENT
		var addTag = function (text) {
			if (!hasTag(text) && checkAllowedTag(text)) {
				$source_element.val($source_element.val() + ($source_element.val() !== '' ? ',' : '') + text);
				$source_element.trigger('change');
			}
			$input_element.val('');
			$tagator_element.focus();
			hideOptions();
		};

		// OPTIONS SEARCH METHOD
		var searchOptions = function () {
			$options_element.empty();
			if ($input_element.val().replace(/\s/g, '') !== '' || self.settings.showAllOptionsOnFocus) {
				var optionsArray = [];
				$.each(self.settings.autocomplete, function (key, value) {
					if (value.toLowerCase().indexOf($input_element.val().toLowerCase()) !== -1) {
						if (!hasTag(value)) {
							optionsArray.push(value);
						}
					}
				});
				generateOptions(optionsArray);
			}
			if ($input_element.is(':focus')) {
				if (!$options_element.is(':empty')) {
					showOptions();
				} else {
					hideOptions();
				}
			} else {
				hideOptions();
			}
			selected_index = -1;
		};

		// GENERATE OPTIONS
		var generateOptions = function (optionsArray) {
			var index = -1;
			$(optionsArray).each(function (key, value) {
				index++;
				var option = createOption(value, index);
				$options_element.append(option);
			});
			refreshActiveOption();
		};

		// CREATE RESULT OPTION
		var createOption = function (text, index) {
			// holder li
			var option = document.createElement('li');
			$(option).data('index', index);
			$(option).data('text', text);
			$(option).html(text);
			$(option).addClass(self.settings.prefix + 'option');
			if (this.selected) {
				$(option).addClass('active');
			}

			// BIND EVENTS
			$(option).bind('mouseover', function (e) {
				e.stopPropagation();
				e.preventDefault();
				selected_index = index;
				refreshActiveOption();
			});
			$(option).bind('mousedown', function (e) {
				e.stopPropagation();
				e.preventDefault();
			});
			$(option).bind('click', function (e) {
				e.preventDefault();
				e.stopPropagation();
				selectOption();
			});


			return option;
		};

		// SHOW OPTIONS AND DIMMER
		var showOptions = function () {
			$tagator_element.removeClass('options-hidden').addClass('options-visible');
			if (self.settings.useDimmer) {
				$('#' + self.settings.prefix + 'dimmer').show();
			}
			$options_element.css('top', ($tagator_element.outerHeight - 2) + 'px');
			if ($tagator_element.hasClass('single')) {
				selected_index = $options_element.find('.' + self.settings.prefix + 'option').index($options_element.find('.' + self.settings.prefix + 'option.active'));
			}
			scrollToActiveOption();
		};

		// HIDE OPTIONS AND DIMMER
		var hideOptions = function () {
			$tagator_element.removeClass('options-visible').addClass('options-hidden');
			if (self.settings.useDimmer) {
				$('#' + self.settings.prefix + 'dimmer').hide();
			}
		};

		// REFRESH ACTIVE IN OPTIONS METHOD
		var refreshActiveOption = function () {
			$options_element.find('.active').removeClass('active');
			if (selected_index !== -1) {
				$options_element.find('.' + self.settings.prefix + 'option').eq(selected_index).addClass('active');
			}
		};

		// SCROLL TO ACTIVE OPTION IN OPTIONS LIST
		var scrollToActiveOption = function () {
			var $active_element = $options_element.find('.' + self.settings.prefix + 'option.active');
			if ($active_element.length > 0) {
				$options_element.scrollTop($options_element.scrollTop() + $active_element.position().top - $options_element.height() / 2 + $active_element.height() / 2);
			}

		};

		// SELECT ACTIVE OPTION
		var selectOption = function () {
			addTag($options_element.find('.' + self.settings.prefix + 'option').eq(selected_index).data('text'));
		};


		// REMOVE PLUGIN AND REVERT INPUT ELEMENT TO ORIGINAL STATE
		self.destroy = function () {
			$tagator_element.remove();
			$source_element.removeData('tagator');
			$source_element.show();
			if ($('.tagator').length === 0) {
				$('#' + self.settings.prefix + 'dimmer').remove();
			}
		};

		// Initialize plugin
		self.init();
	};

	$.fn.tagator = function () {
		var parameters = arguments[0] !== undefined ? arguments : [{}];
		return this.each(function () {
			if (typeof(parameters[0]) === 'object') {
				if (undefined === $(this).data('tagator')) {
					var plugin = new $.tagator(this, parameters[0]);
					$(this).data('tagator', plugin);
				}
			} else if ($(this).data('tagator')[parameters[0]]) {
				$(this).data('tagator')[parameters[0]].apply(this, Array.prototype.slice.call(parameters, 1));
			} else {
				$.error('Method ' + parameters[0] + ' does not exist in $.tagator');
			}
		});
	};
}(jQuery));


$(function () {
	$('.tagator').each(function () {
		var $this = $(this);
		var options = {};
		$.each($this.data(), function (key, value) {
			if (key.substring(0, 7) === 'tagator') {
				var value_temp = value.toString().replace(/'/g, '"');
				value_temp = $.parseJSON(value_temp);
				if (typeof value_temp == 'object') {
					value = value_temp;
				}
				options[key.substring(7, 8).toLowerCase() + key.substring(8)] = value;
			}
		});
		$this.tagator(options);
	});
});



   // página totalmente carregada (DOM, imagens etc.)
});


</script>





<div id="jquery-script-menu">
	<div class="jquery-script-center">

		<div class="jquery-script-ads">
			
			<script type="text/javascript">
			google_ad_client = "ca-pub-2783044520727903"; /* jQuery_demo */
			google_ad_slot = "2780937993";
			google_ad_width = 728;
			google_ad_height = 90;
			//-->
			</script>
			
			<script type="text/javascript"
			src="http://pagead2.googlesyndication.com/pagead/show_ads.js">

			</script>
		</div>
	<div class="jquery-script-clear"></div>
	</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-36251023-1']);
  _gaq.push(['_setDomainName', 'jqueryscript.net']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>






<script>

window.onbeforeunload = function () {
  window.scrollTo(0, 0);
};

$(document).ready(function() {
  

 let arrayde_cromo = [] //cria array da população
  
  //lê as skills de entrada
  let tamanho_equipe = 0  //lê o tamanho da equipe
  
  let skills_entrada, aux, aux2, methodology = [] 
  
   
  
  
  $('.tipe').next().hide(); 
  
  $( "#botao" ).click(function() {
    

    $.getJSON("/dados-do-grafo", function(dadosGrafo) {
      
           
      $.getJSON("/users3", function(dadosUsuarios) {
        
        
        inicia(dadosGrafo,dadosUsuarios);
              
      });
    });
          
 
  
  });	

  let dados_do_grafo =  {}

let dados_user3 = []

  function inicia(dadosGrafo,dadosUsuarios){
    dados_user3 = dadosUsuarios
    console.log('Verificando dados recebidos dentro de adicionarDadosAosNos:');
    console.log(dadosGrafo);
    console.log(dadosUsuarios);

    function adicionarDadosAosNos(dadosGrafo, dadosUsuarios) {
  // Primeiro, criar um mapeamento de user_id para os dados desejados de dadosUsuarios
  const usuarioParaDados = {};
  dadosUsuarios.forEach(user => {
    usuarioParaDados[user.user_id] = {
      methodologies: user.methodology,
      projectsId: user.projects_id,
    };
  });

  // Depois, iterar sobre cada nó em dadosGrafo e adicionar os dados de methodology e projects_id
  dadosGrafo.nodes.forEach(node => {
    if (usuarioParaDados[node.user_id]) {
      // Assegurar que methodologies e projectsId são arrays antes de atribuir
      node.methodology = Array.isArray(usuarioParaDados[node.user_id].methodologies) ? usuarioParaDados[node.user_id].methodologies : [];
      node.projects_id = Array.isArray(usuarioParaDados[node.user_id].projectsId) ? usuarioParaDados[node.user_id].projectsId : [];
    } else {
      // Se não existir correspondência em dadosUsuarios, inicializa com arrays vazios
      node.methodology = [];
      node.projects_id = [];
    }
  });

  return dadosGrafo;
}

dados_do_grafo = adicionarDadosAosNos(dadosGrafo, dadosUsuarios);





    // console.log('dados_do_grafo')
    // console.log(JSON.stringify(dados_do_grafo))        
      
     function montarPerfil(dados_do_grafo) {
          let perfis = {};

          // Mapeando os usuários e suas conexões
          dados_do_grafo.nodes.forEach(node => {
            perfis[node.id] = {
              username: node.id, // Adicionando o username baseado no ID do nó
              user_id: node.user_id,
              type: node.type,
              contractRoleName: node.contractRoleName, // Nome do papel do contrato
              hardskills: node.hardskill, // Assume que queremos apenas as 3 primeiras hardskills
              methodology: [...new Set(node.methodology)], // Remove duplicatas das metodologias
              conexoes: {} // Prepara para adicionar conexões
            };
          });

          // Adicionando conexões e pesos entre os nós
          dados_do_grafo.edges.forEach(edge => {
            if (perfis[edge.source]) {
              perfis[edge.source].conexoes[edge.target] = edge.weight; // Adiciona conexão e peso
            }
          });

          // Convertendo o objeto de perfis em uma lista de perfis
          const listaDePerfis = Object.values(perfis);

          return listaDePerfis;
}


    



let perfisUsuarios =  montarPerfil(dados_do_grafo);


          // Supondo que `dadosDoGrafo` e `dadosDosUsuarios` sejam suas variáveis JSON
          


	 arrayde_cromo = [] //cria array da população
  
  //lê as skills de entrada
   tamanho_equipe = 0  //lê o tamanho da equipe
   //console.log('JSON.stringify(perfisUsuarios)')

//console.log(JSON.stringify(perfisUsuarios))



   
   
  let pess = perfisUsuarios

   


   document.getElementById("salvarprojeto").style.display = "block";
  
  

  pess = Object.entries(pess).map(([key, value]) => {
    return { id: key, ...value };
});

  

  skills_entrada, aux, aux2, methodology= [] 

  //entrada de tecnologias
  skills_entrada = $('#entrada').val().split(/,/)

  

   methodology = $('#method_proj').val().split(/,/)

  

   if( skills_entrada.length === 1 && skills_entrada[0] === "") { skills_entrada = []}
 
   if( methodology.length === 1 && methodology[0] === "") { methodology = []}

   
//converte pra minusculas as hardskills e metodologias
function converterParaMinusculas(pessoas) {
  
  for (let key in pessoas) {
    if (pessoas.hasOwnProperty(key)) {
      let pessoa = pessoas[key];

      if (Array.isArray(pessoa.hardskills)) {
        pessoa.hardskills = pessoa.hardskills.map(skill => skill.toLowerCase());
      }

      if (Array.isArray(pessoa.methodology)) {
        
        pessoa.methodology = pessoa.methodology.map(method => method.toLowerCase());
      }
    }
  }
}



// Chamando a função
converterParaMinusculas(pess);





  function verificaHardskill(skills_entrada, pessoa) {
  for (let i = 0; i < skills_entrada.length; i++) {
    if (pessoa.hardskills.includes(skills_entrada[i].toLowerCase())) {
     
      return true;
    }
  }
  return false;
}   

function verificaMetodologia(methodology, pessoa) {
  for (let i = 0; i < methodology.length; i++) {
    if (pessoa.methodology.includes(methodology[i].toLowerCase())) {
     
      return true;
    }
  }
  return false;
}  

      


$('.sugestao_1').empty();
  $('.sugestao_2').empty();
  
  let devs = {
  DevMast: 0,
  DevPleno: 0,
  DevSeni: 0,
  DevJuni: 0
};

// atribui os valores dos inputs aos atributos do objeto 'devs'
for (const key in devs) {
  if (devs.hasOwnProperty(key)) {
    devs[key] = parseInt($(`#${key}`).val()) || 0; // garante que o valor é um número inteiro
  }
}

// soma o tamanho da equipe com base na quantidade de cada tipo de desenvolvedor
tamanho_equipe += devs.DevMast + devs.DevPleno + devs.DevSeni + devs.DevJuni;

//alert('tamanho_equipe')
//alert(tamanho_equipe)







function verificaNivel(nivel) {
  // Verifica se o nível requisitado está disponível na entrada dos desenvolvedores
  if (nivel === "Master" && devs.DevMast > 0) {
    return true;
  } else if (nivel === "Middle" && devs.DevPleno > 0) {
    return true;
  } else if (nivel === "Senior" && devs.DevSeni > 0) {
    return true;
  } else if (nivel === "Junior" && devs.DevJuni > 0) {
    return true;
  }
  
  return false;
}



  let vetor_denivel = []

  if (devs.DevMast > 0) {
    vetor_denivel.push('Master')
  } 
  if (devs.DevPleno > 0) {
    vetor_denivel.push('Middle')
  }
  if (devs.DevSeni > 0) {
    vetor_denivel.push('Senior')
  }
  if (devs.DevJuni > 0) {
    vetor_denivel.push('Junior')
  }
  
 //alert(vetor_denivel)




let counter = 0
let pessoa = []


if(skills_entrada.length > 0 ){
  



  for(let i=0;i<pess.length;i++){  
   
   addiciona:
       
       if ( verificaNivel(pess[i].contractRoleName) && verificaHardskill(skills_entrada, pess[i]) && pess[i].contractRoleName !== "Project Manager"){
                   
        
                    
        
                    let novouser = {
                        id:counter+1,
                        user_id: pess[i].user_id,
                        name:pess[i].username,
                        id_anonimized: pess[i].id_anonimized,
                        perfil:'Developer', 
                        level:pess[i].contractRoleName,
                        contractRole: 'Specialist',
                        hardskill: pess[i].hardskills,
                        
                        methodology: pess[i].methodology,
                        fit:0,
                        vetor_hardskill: [],
                        
                        vetor_metodologia: [],
                        conexoes: pess[i].conexoes,

                    }
                    pessoa.push(novouser)  
                  
                    counter++
                    break addiciona
         }  
        
  }


}
else {
  alert('Add technologies!')
}



 console.log('De um total de '+ pess.length+ ', ' +pessoa.length+' users foram adicionados com: '+skills_entrada+' e '+methodology)
 let level = []       
 for (let i = 0; i< pessoa.length; i++){
  
  level.push(pessoa[i].level)

  
 }












 converterSkillsParaMinusculas(skills_entrada)
 
 converterSkillsParaMinusculas(methodology)

  
  //tolowercase
  function converterSkillsParaMinusculas(skills_entrada) {
    for (let i = 0; i < skills_entrada.length; i++) {
      skills_entrada[i] = skills_entrada[i].toLowerCase();
      
    }
  }




//similaridade de manhathan
//construindo vetor do projeto
 let vetorProjeto = {
    hardskill_entrada: [],
   
    metodologia_entrada:[]//exemplo de que nao colocou
  }
  
  
 
  for(let i=0; i<skills_entrada.length; i++){
    vetorProjeto.hardskill_entrada.push(1)
  }
  
  for(let i=0; i<methodology.length; i++){
    vetorProjeto.metodologia_entrada.push(1)
  }


  
vetorProjeto = vetorProjeto.hardskill_entrada.concat( vetorProjeto.metodologia_entrada);

  //console.log(JSON.stringify(vetorProjeto))

  




//montando vetor de cada pessoa pra obter o fitness
for(let i=0; i<pessoa.length; i++){
  
  let vetor_entradas = []
  if(skills_entrada.length > 0){
    if(pessoa[i].hardskill.length > 0){
      for(let j=0; j<skills_entrada.length;j++){
        if(pessoa[i].hardskill.includes(skills_entrada[j])){
          pessoa[i].vetor_hardskill.push(1)
        }
        else{
          pessoa[i].vetor_hardskill.push(0)
        }
      }
    }
    else{
        for(let y=0; y<skills_entrada.length;y++){
          pessoa[i].vetor_hardskill.push(0)
        }
      }
    

  }
  
    
  
  if(methodology.length > 0){
    if(pessoa[i].methodology.length > 0){
      for(let m=0; m<methodology.length; m++){
        if(pessoa[i].methodology.includes(methodology[m])){
          pessoa[i].vetor_metodologia.push(1)
        }
        else{
          pessoa[i].vetor_metodologia.push(0)
        }
      }
      }
      else{
        for(let y=0; y<methodology.length;y++){
          pessoa[i].vetor_metodologia.push(0)
        }
      }
    
  }
 

}







const similaridades = calculaSimilaridade(vetorProjeto, pessoa);


function calculaSimilaridade(vetorProjeto, pessoas) {
  const k = vetorProjeto.length; // tamanho do vetor do projeto
  
  // Normalização do vetor de entrada do projeto
  const vetorProjetoNormalizado = vetorProjeto.map((valor, indice) => {
    // considerando apenas o vetor de hard skills
    const maxValor = 2; // valor máximo possível para a hard skill
    return valor / maxValor; // divide pelo valor máximo
  });
  
  // Normalização dos vetores de cada pessoa
  const pessoasNormalizadas = pessoas.map(pessoa => {
    const vetorPessoa = pessoa.vetor_hardskill.concat( pessoa.vetor_metodologia);
    const maxValor = 2; // valor máximo possível para a hard skill
    return vetorPessoa.map(valor => valor / maxValor); // divide pelo valor máximo
  });
  
  // Cálculo da similaridade de Manhattan entre cada pessoa e o vetor do projeto
  const similaridades = pessoasNormalizadas.map((pessoa, indice) => {
    const diferencaAbsoluta = pessoa.map((valor, indice) => {
      return Math.abs(valor - vetorProjetoNormalizado[indice]);
    });
    const somaDiferencas = diferencaAbsoluta.reduce((soma, valor) => soma + valor, 0);
    const similaridade = 1 - (somaDiferencas / k);
    pessoas[indice].fit = similaridade.toFixed(2)
    return { nome: pessoas[indice].nome, similaridade: similaridade.toFixed(2) };
  });
  
  return similaridades;
}






//pega o nivel do dev
function buscalevel(auxi){
  let level = ''
  for (let j = 0; j < pessoa.length; j++) {
      if (pessoa[j].user_id === auxi) {
        level = pessoa[j].level
      }
  }
  
  return level;
}


//pega os nomes
function buscaname(auxi){
  let name = ''
  for (let j = 0; j < pessoa.length; j++) {
      if (pessoa[j].user_id === auxi) {
        name = pessoa[j].name
      }
  }
  
  return name;
}
 
//pega os fit
function buscafit(auxi){
  let fit = 0
  for (let j = 0; j < pessoa.length; j++) {
      if (pessoa[j].id === auxi) {
        
        fit = pessoa[j].fit
        break
      }
  }
  
  
  return fit;
}
let qtdMaster  = 0 
let qtdSenior  = 0 
let qtdPleno  = 0 
let qtdJunior = 0
let array_niveis = []

 function LevelFoiAdd(nivel){
   return array_niveis.includes(nivel)
 }


function verificaInclusao(array_niveis, vetor_denivel) {
  return vetor_denivel.every(item => array_niveis.includes(item));
}


//criando a população inicial
// Suposições para que o exemplo funcione:
// - As funções buscalevel, buscafit, e buscaname estão definidas em outro lugar.
// - A variável pessoa é um array de objetos, onde cada objeto representa uma pessoa com propriedades como user_id.
// - Inicializações necessárias das variáveis que não foram detalhadas na pergunta original.


function cromossomoEhUnico(novoCromossomo, populacao) {
    // Transforma o array de genes do novoCromossomo em uma string ordenada para comparação
    let novoCromossomoGenesString = novoCromossomo.cromo.slice().sort().join(',');

    // Itera sobre cada cromossomo da população para verificar se algum é idêntico ao novoCromossomo
    for (let i = 0; i < populacao.length; i++) {
        let cromossomoAtualGenesString = populacao[i].cromo.slice().sort().join(',');
        
        // Compara as strings dos genes ordenados
        if (novoCromossomoGenesString === cromossomoAtualGenesString) {
            return false; // Um cromossomo idêntico foi encontrado na população
        }
    }

    // Nenhum cromossomo idêntico foi encontrado; o novoCromossomo é único
    return true;
}





function selecionarIndividuoUnico(pessoa, array_niveis, array_auxi) {
    let tentativas = 0;
    let maxTentativas = pessoa.length; // Limita as tentativas para evitar loop infinito
    while (tentativas < maxTentativas) {
        let index = Math.floor(Math.random() * pessoa.length);
        let auxi = pessoa[index].user_id;
        let nivelAuxi = buscalevel(auxi);
        if (!array_niveis.includes(nivelAuxi) && !array_auxi.map(item => item.user_id).includes(auxi) && buscafit(auxi) > 0) {
            return { auxi, nivelAuxi }; // Retorna o user_id e o nível se satisfizer os critérios
        }
        tentativas++;
    }
    return null; // Retorna null se não encontrar um indivíduo adequado
}
// Passo 1: gera população inicial 


  
for (let u= 0; u <4; u++){  //para o dobro da equipe (tamanho da população)
    let auxi = 0
    let cont = 0 
    let tes = new Object( //cria um novo cromossomo
      {id:u,
      cromo:[],
      fit:[],
      nomes:[],
      levels:[],
      fitnessBase:0,
      pesoSocial:0,
      total_fit:0
    })
    arrayde_cromo.push(tes)//coloca no array o novo cromossomo
  }


 qtd_cromossomos = 0;
 let array_auxi = [];
while (qtd_cromossomos < 4) {
    let popul = 0;
    array_auxi = [];
    let array_niveis = [];

    // A lógica para selecionar indivíduos únicos e criar um novo cromossomo permanece a mesma.
    while (popul < tamanho_equipe) {
        let resultado = selecionarIndividuoUnico(pessoa, array_niveis, array_auxi);
        if (resultado) {
            let { auxi, nivelAuxi } = resultado;
            array_niveis.push(nivelAuxi);
            array_auxi.push({
                user_id: auxi,
                fit: buscafit(auxi),
                name: buscaname(auxi),
                level: nivelAuxi
            });
            popul++;
        } else {
            break; // Sai do loop se não conseguir encontrar mais indivíduos únicos.
        }
    }
    console.log('array_auxi tamanho',array_auxi.length)
    console.log('array_auxi', JSON.stringify(array_auxi))
//alert(tamanho_equipe)
    // Após formar um cromossomo completo, verifique sua unicidade antes de adicioná-lo à população.
    if (popul === tamanho_equipe) {
       // Se conseguiu adicionar a quantidade de indivíduos desejada, salva o cromossomo na população
       for (let u = 0; u < array_auxi.length; u++) {
        arrayde_cromo[qtd_cromossomos].cromo.push(array_auxi[u].user_id);
        arrayde_cromo[qtd_cromossomos].fit.push(array_auxi[u].fit);
        arrayde_cromo[qtd_cromossomos].nomes.push(array_auxi[u].name);
        arrayde_cromo[qtd_cromossomos].levels.push(array_auxi[u].level);
       }
        qtd_cromossomos++;
    } else {
        // Lidar com a situação em que não foi possível formar um cromossomo completo, se necessário
    }
   
}
console.log('##############################')

console.log('tamanho da população inicial')

console.log(arrayde_cromo.length)
console.log('##############################')

console.log(' Log da população  inicial criada ')
console.log(JSON.stringify(arrayde_cromo));

console.log('##############################')




























//removendo skills duplicadas
for (let i = 0; i < pessoa.length; i++) {
  let hardskillUnicas = pessoa[i].hardskill.filter((value, index, self) => {
    return self.indexOf(value) === index;
  });
  pessoa[i].hardskill = hardskillUnicas;
}

//removendo methodologies duplicadas
for (let i = 0; i < pessoa.length; i++) {
  let MethodUnicas = pessoa[i].methodology.filter((value, index, self) => {
    return self.indexOf(value) === index;
  });
  pessoa[i].methodology = MethodUnicas;
}





  








let maxIteracoes = 100; // Um número máximo de iterações por segurança
let iteracaoAtual = 0;

let geracoes = 0

while( geracoes < 10 && iteracaoAtual < maxIteracoes ){//condição de parada


  // Passo2: calcula fitness de cada cromossomo (aptidao)
  


  function cfit(cromossomo, nomes, arestas, dadosUsuarios) {
    
    let fitnessBase = 0;
    // Calcula o fitness base com base nos valores individuais de fit
    for (let i = 0; i < cromossomo.length; i++) {
       // fitnessBase += Math.floor(parseFloat(cromossomo[i]) * 10);
       fitnessBase += parseFloat(cromossomo[i]);
    }
    // Calcula o peso social para o cromossomo
    let pesoSocial = calcularPesoSocial(nomes, arestas , dadosUsuarios );
    // Multiplica o fitness base pelo peso social para obter o fitness total
console.log(nomes)
    console.log('fitnessBase',fitnessBase)
    console.log('pesoSocial',pesoSocial)
    

    let fitnessTotal = fitnessBase * pesoSocial;
    console.log('fitnessTotal',fitnessTotal)

     // Retornar tanto o fitnessTotal quanto o pesoSocial
     return { fitnessTotal, pesoSocial, fitnessBase };
  }
  

  function buscarUserIdPorId( idProcurado) {
  const nodo = dados_do_grafo.nodes.find(nodo => nodo.id === idProcurado);
  return nodo ? nodo.user_id : null;
}

    function encontrarProjetosEmComum(dados_user3, nomeDev1, nomeDev2) {
    // Extrai os IDs numéricos dos nomes dos desenvolvedores
    let id1 = buscarUserIdPorId(nomeDev1)
    let id2 = buscarUserIdPorId(nomeDev2)

    // Encontra os usuários correspondentes pelos IDs
    let usuario1 = dados_user3.find(usuario => usuario.user_id === id1);
    let usuario2 = dados_user3.find(usuario => usuario.user_id === id2);

    if (usuario1 && usuario2) {
        // Pega os projetos de cada um
        let projetosUsuario1 = new Set(usuario1.projects_id);
        let projetosUsuario2 = new Set(usuario2.projects_id);

        // Encontra os projetos em comum
        let projetosEmComum = [...projetosUsuario1].filter(id => projetosUsuario2.has(id));

        console.log(`Projetos em comum entre ${nomeDev1} e ${nomeDev2}:`, projetosEmComum);
        return projetosEmComum;
    } else {
        console.log(`Usuário não encontrado: ${nomeDev1} ou ${nomeDev2}`);
        return [];
    }
}




//funcao para calcular o peso social do nomes cromossomo
function calcularPesoSocial(nomes, edgesOriginal, dadosUsuarios) {
    let pesoSocial = 0;
    
    // Normaliza os edges sem redefinir o parâmetro original
    let edges = edgesOriginal.map(edge => ({
        source: edge.source,
        target: edge.target,
        weight: parseFloat(edge.weight) // Garante que weight é um número
    }));

   // console.log("Edges :", JSON.stringify(edges));

    for (let i = 0; i < nomes.length - 1; i++) {
        for (let j = i + 1; j < nomes.length; j++) {
            let aresta = edges.find(edge =>
                (edge.source === nomes[i] && edge.target === nomes[j]) ||
                (edge.source === nomes[j] && edge.target === nomes[i])
            );
            if (aresta) {
                pesoSocial += aresta.weight;
                console.log('Encontrou aresta entre:', nomes[i], 'e', nomes[j], 'Peso:', aresta.weight);
            } else {
                console.log('Aresta não encontrada para:', nomes[i], 'e', nomes[j]);
            }
            // Aqui chamamos a nova função para encontrar projetos em comum
            encontrarProjetosEmComum(dados_user3, nomes[i], nomes[j]);
        }
    }

    if(pesoSocial === 0 ){
      const PESO_MINIMO = 0.01; // Define um peso mínimo para garantir contribuição no fitness
       pesoSocial = Math.max(pesoSocial, PESO_MINIMO);
    }

    console.log("Peso Social Total:", pesoSocial);
    return pesoSocial;
}

// Substituir alert por console.log para melhor visualização e debugging
//console.log('Estrutura de arrayde_cromo', JSON.stringify(arrayde_cromo));
//console.log('Dados do Grafo (Edges):', JSON.stringify(dados_do_grafo.edges));

for (let i = 0; i < arrayde_cromo.length; i++) {
    // Captura o retorno de cfit
    console.log(arrayde_cromo[i].fit)
    let { fitnessTotal, pesoSocial, fitnessBase } = cfit(arrayde_cromo[i].fit, arrayde_cromo[i].nomes, dados_do_grafo.edges, dadosUsuarios);

    // Atribui o fitnessTotal ao cromossomo
    arrayde_cromo[i].total_fit = fitnessTotal;

    // Atribui o pesoSocial ao cromossomo
    arrayde_cromo[i].pesoSocial = pesoSocial;
}
console.log('----------------------------------------')
console.log(arrayde_cromo[0].total_fit);

  // Passo 3: ordena os indivíduos do maior para o menor fitness
  arrayde_cromo.sort(function(a, b) {
  if (a.total_fit < b.total_fit) { return 1}
  if (a.total_fit > b.total_fit) { return -1}
  return 0; //retorne 0 se 'a' for igual a 'b'
  });
  
console.log('arrayde_cromo ordenado com base no total fit')
console.log(JSON.stringify(arrayde_cromo))
console.log('tamanho ' ,arrayde_cromo.length)



  geracoes ++
  console.log('______________GERACAO_',geracoes)
  
  //imprime a populacao criada
  for(let i =0; i< arrayde_cromo.length; i++){
  console.log(' cromossomo : ',i)
  console.log('ids: ', arrayde_cromo[i].cromo)
  console.log('nomes : ', arrayde_cromo[i].nomes)
  console.log('fit : ', arrayde_cromo[i].fit)
  console.log('total fit : ', arrayde_cromo[i].total_fit)
  }
  console.log('___________')
  console.log('tamanho da população: ',arrayde_cromo.length, ' individuos')
  


  
  // Passo 4: Seleção do mais adaptado => método da roleta escolhe dois pais aleatoriamente mas considera porcentagens individuais
  let v = [] //roleta pra seleção
  let a=0
  v = arrayde_cromo //copia o array da população
  for(let i=0;i<arrayde_cromo.length;i++){
  a = arrayde_cromo[i].total_fit + a //soma todos fitness de todos indivíduos
  }
  let p = [] //cria array de porcentagens
  for(let i=0;i<arrayde_cromo.length;i++){
  p[i] = v[i].total_fit / a //porcentagem do indivíduo 'i' será igual ao fitness do indivíduo dividido '/' pelo total de fitness 'a' de todos indivíduos
  }
  q = [] //cria array para soma acumulativa

  //alert(tamanho_equipe)
  for(let i=0;i<tamanho_equipe;i++){ 
  q.push(0) //preenche o array 'q' com zeros
  }
  let aux =0
  for(let i=0;i<p.length;i++){
  q[i] = p[i]+aux //preenche o array 'q' com as porcentagens de 'p'
  aux = q[i] 
  }


  
  let pais = []; // cria array de pais
let r = 0;
while(pais.length < 2){ // enquanto o tamanho do array pais não chega a 2
    r = Math.random(); // gera número aleatório entre 0 e 1
    for(let i=0; i<arrayde_cromo.length; i++){
        if(i === 0 ? r < q[0] : r > q[i-1] && r < q[i]){ // ajuste para considerar o primeiro intervalo e os subsequentes
            let nomeAtual = arrayde_cromo[i].nomes[0];
            let jaExiste = pais.some(pai => pai.nomes[0] === nomeAtual); // verifica se o pai atual já existe no array de pais
            if(!jaExiste && pais.length < 2){ // se não existe e ainda há espaço para pais
                pais.push(arrayde_cromo[i]); // adiciona o pai atual ao array de pais
                break; // sai do loop for, pois já encontramos um pai para esta iteração
            }
        }
    }
}




  //reinicia ids dos pais selecionados
  for(let p=0;p<pais.length;p++){
  pais[p].id =  p
  }
  
  //imprime pais selecionados
  for(let i =0; i< pais.length; i++){
    console.log('_____PAIS______')
  console.log(' pai : ',i)
  console.log('ids: ', pais[i].cromo)
  console.log('nomes : ', pais[i].nomes)
  console.log('fit : ', pais[i].fit)
  console.log('total fit : ', pais[i].total_fit)
  }
  console.log('___________')
  
  
  // Passo 5: cruzamentos: O ponto de corte é aleatório entre a posicao 1 e 3
 // Supondo que 'pais' é um array com os dois pais selecionados
// E 'arrayde_cromo' é a população atual

let filhos = [];


// Gerando dois filhos a partir dos pais
for (let u = 0; u < 2; u++) {
    let filho = {cromo: [], fit: [], nomes: [], total_fit: 0};
    let genesUnicos = new Set(); // Usado para garantir unicidade
    let corte = Math.floor(Math.random() * (tamanho_equipe - 2)) + 1;
    let paisSegmentos = u % 2 === 0 ? [pais[0], pais[1]] : [pais[1], pais[0]];
    // Adiciona genes garantindo unicidade
    paisSegmentos[0].cromo.slice(0, corte).forEach(gene => genesUnicos.add(gene));
    paisSegmentos[1].cromo.slice(corte).forEach(gene => genesUnicos.add(gene));
    // Converta o Set de volta para array e atribua ao filho
    filho.cromo = Array.from(genesUnicos);
    // Adapte fit, nomes, etc., com base nos genes únicos
    filhos.push(filho);
}


// Ordenação dos filhos por aptidão, do maior para o menor
filhos.sort((a, b) => b.total_fit - a.total_fit);
console.log('--------------------->>>>>>>>>>>')
console.log('filhos')
console.log(filhos)


  
// Passo 6: Mutação
let array_mutadores = []
  for(let i=0;i<filhos.length;i++){
  for(let j=0;j<filhos.length;j++){ 
    array_mutadores.push(filhos[i].cromo[j]) //copia todos ids para testar na mutacao
  }
  }
  let array_mutadores_nomes = []
  for(let i=0;i<filhos.length;i++){
  for(let j=0;j<filhos.length;j++){ 
    array_mutadores_nomes.push(filhos[i].nomes[j]) //copia todos ids para testar na mutacao
  }
  }
  let array_mutadores_fits = []
  for(let i=0;i<filhos.length;i++){
  for(let j=0;j<filhos.length;j++){ 
    array_mutadores_fits.push(filhos[i].fit[j]) //copia todos ids para testar na mutacao
  }
  }
  
  
  
  // Passo 6: Mutação

  

  
let taxademutacao = 0.005; // 0,5%
filhos.forEach(filho => {
    filho.cromo.forEach((gene, index) => {
        let num = Math.random(); // Gera um número aleatório entre 0 e 1
        if (num < taxademutacao || num === taxademutacao) { // Verifica se vai ocorrer a mutação
            let aleato;
            let geneUnico = false;
            let tentativas = 0;
            while (!geneUnico && tentativas < 100) { // Limita o número de tentativas para evitar loop infinito
                aleato = Math.floor(Math.random() * filho.cromo.length); // Gera um número aleatório dentro do range do cromossomo
                if (!Array.isArray(filho.cromo)) {
                    console.error('filho.cromo não é um array:', filho.cromo);
                    // Inicialize filho.cromo como um array vazio ou faça outras ações corretivas aqui.
                }
               
                if (!filho.cromo.includes(array_mutadores[aleato])) { // Verifica se o gene selecionado já existe no cromossomo
                    geneUnico = true; // Se não existir, pode proceder com a mutação
                }
                tentativas++;
            }
            if (geneUnico) {
                // Realiza a mutação
                filho.cromo[index] = array_mutadores[aleato];
                filho.nomes[index] = array_mutadores_nomes[aleato];
                filho.fit[index] = array_mutadores_fits[aleato];
            }
        }
    });
});

  

console.log('==============tamanho de filhos', filhos.length)

console.log('========== tamanho de aaray de cromo antes de elitismo ',arrayde_cromo.length)


console.log('arrayde_cromo anted de remover duplicados',arrayde_cromo)
// Passo antes: Remover cromossomos idênticos
// Função para comparar se dois arrays têm os mesmos elementos, independente da ordem
function arraysSaoIguais(arr1, arr2) {
    if (arr1.length !== arr2.length) return false;
    const arr1Sorted = arr1.slice().sort();
    const arr2Sorted = arr2.slice().sort();
    for (let i = 0; i < arr1Sorted.length; i++) {
        if (arr1Sorted[i] !== arr2Sorted[i]) {
            return false;
        }
    }
    //alert('achou duplicado: '+JSON.stringify(arr1))
    return true;
}

// Filtrar cromossomos únicos com base nos nomes
let indicesParaRemover = [];
arrayde_cromo.forEach((cromossomo, index) => {
    for (let i = 0; i < arrayde_cromo.length; i++) {
        if (i !== index && arraysSaoIguais(cromossomo.nomes, arrayde_cromo[i].nomes)) {
            indicesParaRemover.push(i);
        }
    }
});

// Removendo índices duplicados e ordenando em ordem decrescente para evitar problemas ao remover
indicesParaRemover = [...new Set(indicesParaRemover)].sort((a, b) => b - a);

// Remover os cromossomos duplicados
indicesParaRemover.forEach(index => {
    arrayde_cromo.splice(index, 1);
});



console.log('arrayde_cromo DEPOIS de remover duplicados',arrayde_cromo)






// Passo 7: Elitismo mantém os dois melhores indivíduos da população
// Ordenar pelo fitness total, do maior para o menor
arrayde_cromo.sort((a, b) => b.total_fit - a.total_fit);

// Seleciona os N melhores indivíduos da população
const N = 2; // Define quantos dos melhores indivíduos manter
const melhoresIndividuos = arrayde_cromo.slice(0, N);

// Atualiza a população para manter apenas os N melhores indivíduos
arrayde_cromo = [...melhoresIndividuos];







  //Passo 8: obtem  nova população
  for(let i=0; i<filhos.length; i++){
  arrayde_cromo.push(filhos[i])
  }


  arrayde_cromo.sort((a, b) => b.total_fit - a.total_fit);

  console.log('tamamho  da população',arrayde_cromo.length)
  console.log('população:',arrayde_cromo)

  //Passo 9: volta ao passo 2
  
    console.log('tamanho da população: ',arrayde_cromo.length, ' individuos')
  //fim AG
  iteracaoAtual++;
  }
  //alert('antes')
  //alert(JSON.stringify(arrayde_cromo[0].total_fit))
  //alert(JSON.stringify(arrayde_cromo[1].total_fit))
  
  //alert(JSON.stringify(arrayde_cromo[1].nomes))
  //alert(JSON.stringify(arrayde_cromo[2].nomes))
  
  //garantir que a pessoa nao se repita entre as sugestões
 
 

  
  
  
  
  //calcula fitness de cada cromossomo (aptidao)
  let cfit3 = (x) =>  x.reduce(function(soma, i) {//percorre o array de fits do cromossomo 'i'
  return soma + i; //soma os valores contidos no array e retorna
  });
  for(let i=0;i<arrayde_cromo.length;i++){
  arrayde_cromo[i].total_fit = cfit(arrayde_cromo[i].fit,arrayde_cromo[i].nomes,dados_do_grafo.edges) //fitness de cada indivíduo (cromossomo) é gerado
  }
  
  
  
  
  
  
  
  
  
  
  
  
  document.getElementById("sugestao1").style.display = "block";
  document.getElementById("sugestao2").style.display = "block";
  let divPai = $('.sugestao_1');
  
  let divPai2 = $('.sugestao_2');

// Supondo que arrayde_cromo seja o seu array de cromossomos/sugestões
arrayde_cromo.sort((a, b) => b.total_fit - a.total_fit); // Ordena do maior para o menor total_fit

// Agora que o array está ordenado, vamos exibir os dois primeiros elementos
//for(let i = 0; i < Math.min(2, arrayde_cromo.length); i++){
 // console.log(`Sugestão ${i}: ${JSON.stringify(arrayde_cromo[i].nomes)} - Fit total: ${JSON.stringify(arrayde_cromo[i].total_fit)}`);
//}

  
  //alert('arrayde_cromo:')
  for(let i=0; i< arrayde_cromo.length; i++){
    alert('Sugestão '+i+' '+JSON.stringify(arrayde_cromo[i].nomes)+' Fit total: '+ JSON.stringify(arrayde_cromo[i].total_fit))
  }
  
  //let metodi= $('#method_proj').val() so p confirmar o metod na entrada
  //alert(metodi)
  //alert(JSON.stringify(arrayde_cromo[2].nomes))
  
  //alert('depois')
  
  //alert(JSON.stringify(arrayde_cromo[0].total_fit))
  //alert(JSON.stringify(arrayde_cromo[1].total_fit))
  
  let porc1 = 0 
  let porc2 = 0
  
 // alert('porc1 arrayde_cromo[0]'+arrayde_cromo[0].total_fit+' *100 / tamanho_equipe '+tamanho_equipe+ ' skills_entrada.length '+skills_entrada.length)



 // alert(JSON.stringify(arrayde_cromo[0].nomes) + JSON.stringify(arrayde_cromo[0].fit))
 // alert(JSON.stringify(arrayde_cromo[1].nomes) + JSON.stringify(arrayde_cromo[1].fit))


let soma_perc1 = 0.0
for(let i =0; i< arrayde_cromo[0].fit.length; i++){
  soma_perc1 += parseFloat(arrayde_cromo[0].fit[i])
}
let soma_perc2 = 0.0

for(let i =0; i< arrayde_cromo[1].fit.length; i++){
  soma_perc2 += parseFloat(arrayde_cromo[1].fit[i])
}



  porc1 = parseFloat(soma_perc1 * 100 /arrayde_cromo[0].fit.length)
  porc1=porc1.toFixed(0)

  porc2 = parseFloat(soma_perc2 * 100 /arrayde_cromo[1].fit.length)
  porc2=porc2.toFixed(0)
 

  $("#percentual_equipe1").html('Fitness base: '+arrayde_cromo[0].total_fit.fitnessBase.toFixed(3)+' ('+porc1+'%)');
  $("#peso_social_equipe1").html('Peso social: '+ arrayde_cromo[0].pesoSocial.toFixed(3));
  $("#fitnessTotal_equipe1").html('Fitness total: '+ arrayde_cromo[0].total_fit.fitnessTotal.toFixed(3));
console.log('----------------------------------------')
console.log(arrayde_cromo[0].total_fit);

  
  $("#percentual_equipe2").html('Fitness base: '+arrayde_cromo[1].total_fit.fitnessBase.toFixed(3)+' ('+porc2+'%)');
  $("#peso_social_equipe2").html('Peso social: '+ arrayde_cromo[1].pesoSocial.toFixed(3));
  $("#fitnessTotal_equipe2").html('Fitness total: '+ arrayde_cromo[1].total_fit.fitnessTotal.toFixed(3));
  
  if ((porc1>39) && (porc1<50)){
  $("#percentual_equipe1").css("background-color", "#eead2d");
  }
  if (porc1>49){
  $("#percentual_equipe1").css("background-color", "#008000");
  }
  if (porc1<40){
  $("#percentual_equipe1").css("background-color", "#ae0000");
  }	
  
  if ((porc2>39) && (porc2<50)){
  $("#percentual_equipe2").css("background-color", "#eead2d");
  }
  if (porc2>49){
  $("#percentual_equipe2").css("background-color", "#008000");
  }
  if (porc2<40){
  $("#percentual_equipe2").css("background-color", "#ae0000");
  }	
  divPai.empty()
  divPai2.empty()

for(let i = 0 ; i< pessoa.length; i++){
  for(let j = 0 ; j<  pessoa[i].hardskill.length; j++){

    pessoa[i].hardskill[j] = pessoa[i].hardskill[j].charAt(0).toUpperCase() + pessoa[i].hardskill[j].slice(1)
  }
}

for(let i = 0 ; i< pessoa.length; i++){
  for(let j = 0 ; j<  pessoa[i].methodology.length; j++){

    pessoa[i].methodology[j] = pessoa[i].methodology[j].charAt(0).toUpperCase() + pessoa[i].methodology[j].slice(1)
  }
}
let id = ''
let id2 = ''

  for(let i=0; i< tamanho_equipe; i++){
    let perfil = ' '
    let level = ' '
    let contractRole = ' '
    let skilltec = ''
    id = ''
    for (let k=0; k<pessoa.length; k++){
      if( arrayde_cromo[0].nomes[i] === pessoa[k].name){ 
        id = arrayde_cromo[0].nomes[i]
        perfil= pessoa[k].perfil
        level= pessoa[k].level
        contractRole = pessoa[k].contractRole
        skilltec = pessoa[k].hardskill
        method = pessoa[k].methodology

      }
    }
    divPai.append( "<div id='"+id+"' class='column' style='cursor:pointer; z-index: 1; display:block;'><div class='card'><div class='row'><div class='col'><span id='percentual_kiran' style='align: right;' title='percentage ' class='porcentag tipe'>"+((arrayde_cromo[0].fit[i])*100).toFixed(0)+"%</span><div  class='tooltipe2 btn-primary' ></div></div></div><div class='row' style='justify-content: center;'><img style='width: 20%' src='https://felipeomc.github.io/teamplus/avatar.png' class='rounded-circle img-thumbnail ' alt='...'></div><div class='row' style='justify-content: center;'><h4>"+id+"</h4></div><div class='row' style='justify-content: center;'><h5 class='row'>"+ perfil+" "+"</h5></div> <div class='row' style='justify-content: center;'><h5 class='row'>"+ level+"</h5></div> <div class='row' style='justify-content: center;margin-bottom: 10px;'><p>" + skilltec+"</p><p>" + method + "</p></div></div></div></div>")
    $("#"+id).draggable();
  
  }
  for(let i=0; i< tamanho_equipe; i++){
  let perfil = ' '
  let level = ' '
  let contractRole = ' '
  let skilltec = ''
   id2 = ''
  for (let j=0; j<pessoa.length; j++){
  if(arrayde_cromo[1].nomes[i] === pessoa[j].name){ //verifica em todos arrays de id de todos cromossomos se o id (auxi) já existe
    id2 = arrayde_cromo[1].nomes[i]
    perfil= pessoa[j].perfil
    level= pessoa[j].level
    contractRole = pessoa[j].contractRole
    skilltec = pessoa[j].hardskill
   
    method = pessoa[j].methodology
  }
  }
  divPai2.append( "<div id='"+id2+"' class='column' style='cursor:pointer; z-index: 1; display:block;'><div class='card'><div class='row'><div class='col'><span id='percentual_kiran' style='align: right;' title='percentage ' class='porcentag tipe'>"+((arrayde_cromo[1].fit[i])*100).toFixed(0)+"%</span><div  class='tooltipe2 btn-primary' ></div></div></div><div class='row' style='justify-content: center;'><img style='width: 20%' src='https://felipeomc.github.io/teamplus/avatar.png' class='rounded-circle img-thumbnail ' alt='...'></div><div class='row' style='justify-content: center;'><h4>"+id2+"</h4></div><div class='row' style='justify-content: center;'><h5 class='row'>"+ perfil+" "+"</h5></div> <div class='row' style='justify-content: center;'><h5 class='row'>"+ level+"</h5></div> <div class='row' style='justify-content: center; margin-bottom: 10px;'><p>" + skilltec+"</p><p>" + method + "</p></div></div></div></div>")
  $("#"+id2).draggable();
  
  }
  
  }
  




  
  $( "#salvarequipe" ).click(function() {	
      alert('saving');
 
    alert(JSON.stringify(arrayde_cromo[0].cromo))
      alert(JSON.stringify(arrayde_cromo[0].nomes))
      $('#equipeselecionada').val(arrayde_cromo[0].nomes);
      $('#method').val(methodology);
      var valorObtido = $("#percentual_equipe1").html();

// Define o valor do elemento de input com o id "#percentual_da_equipe"
      $("#percentual_da_equipe").val(valorObtido);
      
      localStorage.setItem('valueTexto', arrayde_cromo[0].nomes);
      // team_choice = arrayde_cromo[0].nomes
      
  
  
  });	
  $( "#salvarequipe2" ).click(function() {	
      alert('saving');

   

      alert(arrayde_cromo[1].nomes)
      $('#equipeselecionada').val(arrayde_cromo[1].nomes);
      $('#method').val(methodology);
      localStorage.setItem('valueTexto', arrayde_cromo[1].nomes);
      //team_choice = arrayde_cromo[1].nomes
      var valorObtido = $("#percentual_equipe1").html();

// Define o valor do elemento de input com o id "#percentual_da_equipe"
      $("#percentual_da_equipe").val(valorObtido);
      
  });	
  
  
  
  $("#sugest1").droppable({
      
  drop: function(event, ui) { //' voltou para 1'
    let nom = ui.draggable.prop('id')
    
         
    for (let j=0; j<arrayde_cromo[1].cromo.length; j++){
      if(nom === arrayde_cromo[1].cromo[j]){ 
        arrayde_cromo[0].cromo.push(arrayde_cromo[1].cromo[j])
        arrayde_cromo[0].fit.push(arrayde_cromo[1].fit[j])
        arrayde_cromo[0].nomes.push(arrayde_cromo[1].nomes[j])
        
        arrayde_cromo[1].cromo.splice(j, 1);
        arrayde_cromo[1].fit.splice(j, 1);
        arrayde_cromo[1].nomes.splice(j, 1);
        
      }
    }
    //calcula fitness de cada cromossomo (aptidao)
    let cfit2 = (x) =>  x.reduce(function(soma, i) {//percorre o array de fits do cromossomo 'i'
      return soma + i; //soma os valores contidos no array e retorna
    });

    for(let i=0;i<arrayde_cromo.length;i++){
      arrayde_cromo[i].total_fit = cfit(arrayde_cromo[i].fit,arrayde_cromo[i].nomes, dados_do_grafo.edges) //fitness de cada indivíduo (cromossomo) é gerado
    }
    porc1 = 0 
    porc2 = 0
     porc1 = parseFloat((( (arrayde_cromo[0].total_fit)*100)/(tamanho_equipe*skills_entrada.length)).toFixed(1))
     porc2 = parseFloat((( (arrayde_cromo[1].total_fit)*100)/(tamanho_equipe*skills_entrada.length)).toFixed(1))
    $("#percentual_equipe1").html(porc1+'%');
    $("#percentual_equipe2").html(porc2+'%');
    
    if ((porc1>39) && (porc1<50)){
      $("#percentual_equipe1").css("background-color", "#eead2d");
    }
    if (porc1>49){
      $("#percentual_equipe1").css("background-color", "#008000");
    }
    if (porc1<40){
      $("#percentual_equipe1").css("background-color", "#ae0000");
    }	
    
    if ((porc2>39) && (porc2<50)){
      $("#percentual_equipe2").css("background-color", "#eead2d");
    }
    if (porc2>49){
      $("#percentual_equipe2").css("background-color", "#008000");
    }
    if (porc2<40){
      $("#percentual_equipe2").css("background-color", "#ae0000");
    }
  
   
          
  },
  over: function(event, ui) {
  
  },
  out: function(event, ui) {//' foi para 2'
    let nom = ui.draggable.prop('id')
       
    for (let j=0; j<arrayde_cromo[0].cromo.length; j++){
      if(nom === arrayde_cromo[0].cromo[j]){ 
        arrayde_cromo[1].cromo.push(arrayde_cromo[0].cromo[j])
        arrayde_cromo[1].fit.push(arrayde_cromo[0].fit[j])
        arrayde_cromo[1].nomes.push(arrayde_cromo[0].nomes[j])
        
        arrayde_cromo[0].cromo.splice(j, 1);
        arrayde_cromo[0].fit.splice(j, 1);
        arrayde_cromo[0].nomes.splice(j, 1);
  
      }
    }
    //calcula fitness de cada cromossomo (aptidao)
    let cfit2 = (x) =>  x.reduce(function(soma, i) {//percorre o array de fits do cromossomo 'i'
      return soma + i; //soma os valores contidos no array e retorna
    });
    for(let i=0;i<arrayde_cromo.length;i++){
      arrayde_cromo[i].total_fit = cfit(arrayde_cromo[i].fit,arrayde_cromo[i].nomes, dados_do_grafo.edges) //fitness de cada indivíduo (cromossomo) é gerado
    }
    porc1 = 0 
    porc2 = 0
    porc1 = parseFloat((( (arrayde_cromo[0].total_fit)*100)/(tamanho_equipe*skills_entrada.length)).toFixed(1))
    porc2 = parseFloat((( (arrayde_cromo[1].total_fit)*100)/(tamanho_equipe*skills_entrada.length)).toFixed(1))
    $("#percentual_equipe1").html(porc1+'%');
    $("#percentual_equipe2").html(porc2+'%');
    
    if ((porc1>39) && (porc1<50)){
      $("#percentual_equipe1").css("background-color", "#eead2d");
    }
    if (porc1>49){
      $("#percentual_equipe1").css("background-color", "#008000");
    }
    if (porc1<40){
      $("#percentual_equipe1").css("background-color", "#ae0000");
    }	
    
    if ((porc2>39) && (porc2<50)){
      $("#percentual_equipe2").css("background-color", "#eead2d");
    }
    if (porc2>49){
      $("#percentual_equipe2").css("background-color", "#008000");
    }
    if (porc2<40){
      $("#percentual_equipe2").css("background-color", "#ae0000");
    }	
  
  }
  })
  
  
  $("#sugest2").droppable({
      
  drop: function(event, ui) {// voltou para 2
  
    let nom = ui.draggable.prop('id')
         
    for (let j=0; j<arrayde_cromo[0].nomes.length; j++){
      if(nom === arrayde_cromo[0].nomes[j]){ 
        arrayde_cromo[1].cromo.push(arrayde_cromo[0].cromo[j])
        arrayde_cromo[1].fit.push(arrayde_cromo[0].fit[j])
        arrayde_cromo[1].nomes.push(arrayde_cromo[0].nomes[j])
        
        arrayde_cromo[0].cromo.splice(j, 1);
        arrayde_cromo[0].fit.splice(j, 1);
        arrayde_cromo[0].nomes.splice(j, 1);
  
      }
    }
    //calcula fitness de cada cromossomo (aptidao)
    let cfit2 = (x) =>  x.reduce(function(soma, i) {//percorre o array de fits do cromossomo 'i'
      return soma + i; //soma os valores contidos no array e retorna
    });
    for(let i=0;i<arrayde_cromo.length;i++){
      arrayde_cromo[i].total_fit = cfit(arrayde_cromo[i].fit,arrayde_cromo[i].nomes, dados_do_grafo.edges) //fitness de cada indivíduo (cromossomo) é gerado
    }
    porc1 = 0 
    porc2 = 0
    porc1 = parseFloat((( (arrayde_cromo[0].total_fit)*100)/(tamanho_equipe*skills_entrada.length)).toFixed(1))
    porc2 = parseFloat((( (arrayde_cromo[1].total_fit)*100)/(tamanho_equipe*skills_entrada.length)).toFixed(1))
    $("#percentual_equipe1").html(porc1+'%');
    $("#percentual_equipe2").html(porc2+'%');
    
    if ((porc1>39) && (porc1<50)){
      $("#percentual_equipe1").css("background-color", "#eead2d");
    }
    if (porc1>49){
      $("#percentual_equipe1").css("background-color", "#008000");
    }
    if (porc1<40){
      $("#percentual_equipe1").css("background-color", "#ae0000");
    }	
    
    if ((porc2>39) && (porc2<50)){
      $("#percentual_equipe2").css("background-color", "#eead2d");
    }
    if (porc2>49){
      $("#percentual_equipe2").css("background-color", "#008000");
    }
    if (porc2<40){
      $("#percentual_equipe2").css("background-color", "#ae0000");
    }	
  
    
          
  },
  over: function(event, ui) {
  
  },
  out: function(event, ui) {//foi para 1
  
    let nom = ui.draggable.prop('id')
         
    for (let j=0; j<arrayde_cromo[1].nomes.length; j++){
      if(nom === arrayde_cromo[1].nomes[j]){ 
        arrayde_cromo[0].cromo.push(arrayde_cromo[1].cromo[j])
        arrayde_cromo[0].fit.push(arrayde_cromo[1].fit[j])
        arrayde_cromo[0].nomes.push(arrayde_cromo[1].nomes[j])
        
        arrayde_cromo[1].cromo.splice(j, 1);
        arrayde_cromo[1].fit.splice(j, 1);
        arrayde_cromo[1].nomes.splice(j, 1);
  
      }
    }
    //calcula fitness de cada cromossomo (aptidao)
    let cfit2 = (x) =>  x.reduce(function(soma, i) {//percorre o array de fits do cromossomo 'i'
      return soma + i; //soma os valores contidos no array e retorna
    });
    for(let i=0;i<arrayde_cromo.length;i++){
      arrayde_cromo[i].total_fit = cfit(arrayde_cromo[i].fit,arrayde_cromo[i].nomes,dados_do_grafo.edges) //fitness de cada indivíduo (cromossomo) é gerado
    }
    porc1 = 0 
    porc2 = 0
    porc1 = parseFloat((( (arrayde_cromo[0].total_fit)*100)/(tamanho_equipe*skills_entrada.length)).toFixed(1))
    porc2 = parseFloat((( (arrayde_cromo[1].total_fit)*100)/(tamanho_equipe*skills_entrada.length)).toFixed(1))
    $("#percentual_equipe1").html(porc1+'%');
    $("#percentual_equipe2").html(porc2+'%');
    
    if ((porc1>39) && (porc1<50)){
      $("#percentual_equipe1").css("background-color", "#eead2d");
    }
    if (porc1>49){
      $("#percentual_equipe1").css("background-color", "#008000");
    }
    if (porc1<40){
      $("#percentual_equipe1").css("background-color", "#ae0000");
    }	
    
    if ((porc2>39) && (porc2<50)){
      $("#percentual_equipe2").css("background-color", "#eead2d");
    }
    if (porc2>49){
      $("#percentual_equipe2").css("background-color", "#008000");
    }
    if (porc2<40){
      $("#percentual_equipe2").css("background-color", "#ae0000");
    }
  
  }
  })
  
  
  })

	</script>
  
 
<!-- <script src="plugins/bootstrap/js/bootstrap.bundle.min.js"></script> -->
<!-- AdminLTE -->
<!--<script src="dist/js/adminlte.js"></script>-->
<!-- Ekko Lightbox -->
<!--<script src="plugins/ekko-lightbox/ekko-lightbox.min.js"></script>-->
<script src="https://felipeomc.github.io/te/adminlte.js"></script>
<!-- Ekko Lightbox -->
<script src="https://felipeomc.github.io/te/ekko-lightbox.min.js"></script>

<script src="https://felipeomc.github.io/te/jquery.filterizr.min.js"></script>
<!--<script src="../plugins/filterizr/jquery.filterizr.min.js"></script>-->

<!-- Page specific script -->
<script>
  $(function () {
    $(document).on('click', '[data-toggle="lightbox"]', function(event) {
      event.preventDefault();
      $(this).ekkoLightbox({
        alwaysShowClose: true
      });
    });

    $('.filter-container').filterizr({gutterPixels: 3});
    $('.btn[data-filter]').on('click', function() {
      $('.btn[data-filter]').removeClass('active');
      $(this).addClass('active');
    });
  });
</script>


 
<script>
$(function(){
    $('.tipe').hover(
        function(){
            $(this).next().show();
        },
        function(){
            $(this).next().hide();   
        }
    )   
})
</script>



</body>
</html>
